// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (cs *CollectSpec) Frames(
	ctx context.Context, after *Cursor, first *int, before *Cursor, last *int, where *FrameSpecWhereInput,
) (*FrameSpecConnection, error) {
	opts := []FrameSpecPaginateOption{
		WithFrameSpecFilter(where.Filter),
	}
	alias := graphql.GetFieldContext(ctx).Field.Alias
	totalCount, hasTotalCount := cs.Edges.totalCount[0][alias]
	if nodes, err := cs.NamedFrames(alias); err == nil || hasTotalCount {
		pager, err := newFrameSpecPager(opts, last != nil)
		if err != nil {
			return nil, err
		}
		conn := &FrameSpecConnection{Edges: []*FrameSpecEdge{}, TotalCount: totalCount}
		conn.build(nodes, pager, after, first, before, last)
		return conn, nil
	}
	return cs.QueryFrames().Paginate(ctx, after, first, before, last, opts...)
}

func (c *Collection) ProcessSnapshots(ctx context.Context) (result []*ProcessSnapshot, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = c.NamedProcessSnapshots(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = c.Edges.ProcessSnapshotsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = c.QueryProcessSnapshots().All(ctx)
	}
	return result, err
}

func (fs *FrameSpec) CollectSpecRef(ctx context.Context) (*CollectSpec, error) {
	result, err := fs.Edges.CollectSpecRefOrErr()
	if IsNotLoaded(err) {
		result, err = fs.QueryCollectSpecRef().Only(ctx)
	}
	return result, err
}
