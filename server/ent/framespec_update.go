// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stacksviz/ent/framespec"
	"stacksviz/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// FrameSpecUpdate is the builder for updating FrameSpec entities.
type FrameSpecUpdate struct {
	config
	hooks    []Hook
	mutation *FrameSpecMutation
}

// Where appends a list predicates to the FrameSpecUpdate builder.
func (fsu *FrameSpecUpdate) Where(ps ...predicate.FrameSpec) *FrameSpecUpdate {
	fsu.mutation.Where(ps...)
	return fsu
}

// SetFrame sets the "frame" field.
func (fsu *FrameSpecUpdate) SetFrame(s string) *FrameSpecUpdate {
	fsu.mutation.SetFrame(s)
	return fsu
}

// SetExprs sets the "exprs" field.
func (fsu *FrameSpecUpdate) SetExprs(s []string) *FrameSpecUpdate {
	fsu.mutation.SetExprs(s)
	return fsu
}

// AppendExprs appends s to the "exprs" field.
func (fsu *FrameSpecUpdate) AppendExprs(s []string) *FrameSpecUpdate {
	fsu.mutation.AppendExprs(s)
	return fsu
}

// Mutation returns the FrameSpecMutation object of the builder.
func (fsu *FrameSpecUpdate) Mutation() *FrameSpecMutation {
	return fsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fsu *FrameSpecUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fsu.sqlSave, fsu.mutation, fsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fsu *FrameSpecUpdate) SaveX(ctx context.Context) int {
	affected, err := fsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fsu *FrameSpecUpdate) Exec(ctx context.Context) error {
	_, err := fsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsu *FrameSpecUpdate) ExecX(ctx context.Context) {
	if err := fsu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fsu *FrameSpecUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(framespec.Table, framespec.Columns, sqlgraph.NewFieldSpec(framespec.FieldID, field.TypeInt))
	if ps := fsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fsu.mutation.Frame(); ok {
		_spec.SetField(framespec.FieldFrame, field.TypeString, value)
	}
	if value, ok := fsu.mutation.Exprs(); ok {
		_spec.SetField(framespec.FieldExprs, field.TypeJSON, value)
	}
	if value, ok := fsu.mutation.AppendedExprs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, framespec.FieldExprs, value)
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{framespec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fsu.mutation.done = true
	return n, nil
}

// FrameSpecUpdateOne is the builder for updating a single FrameSpec entity.
type FrameSpecUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FrameSpecMutation
}

// SetFrame sets the "frame" field.
func (fsuo *FrameSpecUpdateOne) SetFrame(s string) *FrameSpecUpdateOne {
	fsuo.mutation.SetFrame(s)
	return fsuo
}

// SetExprs sets the "exprs" field.
func (fsuo *FrameSpecUpdateOne) SetExprs(s []string) *FrameSpecUpdateOne {
	fsuo.mutation.SetExprs(s)
	return fsuo
}

// AppendExprs appends s to the "exprs" field.
func (fsuo *FrameSpecUpdateOne) AppendExprs(s []string) *FrameSpecUpdateOne {
	fsuo.mutation.AppendExprs(s)
	return fsuo
}

// Mutation returns the FrameSpecMutation object of the builder.
func (fsuo *FrameSpecUpdateOne) Mutation() *FrameSpecMutation {
	return fsuo.mutation
}

// Where appends a list predicates to the FrameSpecUpdate builder.
func (fsuo *FrameSpecUpdateOne) Where(ps ...predicate.FrameSpec) *FrameSpecUpdateOne {
	fsuo.mutation.Where(ps...)
	return fsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fsuo *FrameSpecUpdateOne) Select(field string, fields ...string) *FrameSpecUpdateOne {
	fsuo.fields = append([]string{field}, fields...)
	return fsuo
}

// Save executes the query and returns the updated FrameSpec entity.
func (fsuo *FrameSpecUpdateOne) Save(ctx context.Context) (*FrameSpec, error) {
	return withHooks(ctx, fsuo.sqlSave, fsuo.mutation, fsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fsuo *FrameSpecUpdateOne) SaveX(ctx context.Context) *FrameSpec {
	node, err := fsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fsuo *FrameSpecUpdateOne) Exec(ctx context.Context) error {
	_, err := fsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsuo *FrameSpecUpdateOne) ExecX(ctx context.Context) {
	if err := fsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fsuo *FrameSpecUpdateOne) sqlSave(ctx context.Context) (_node *FrameSpec, err error) {
	_spec := sqlgraph.NewUpdateSpec(framespec.Table, framespec.Columns, sqlgraph.NewFieldSpec(framespec.FieldID, field.TypeInt))
	id, ok := fsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FrameSpec.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, framespec.FieldID)
		for _, f := range fields {
			if !framespec.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != framespec.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fsuo.mutation.Frame(); ok {
		_spec.SetField(framespec.FieldFrame, field.TypeString, value)
	}
	if value, ok := fsuo.mutation.Exprs(); ok {
		_spec.SetField(framespec.FieldExprs, field.TypeJSON, value)
	}
	if value, ok := fsuo.mutation.AppendedExprs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, framespec.FieldExprs, value)
		})
	}
	_node = &FrameSpec{config: fsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{framespec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fsuo.mutation.done = true
	return _node, nil
}
