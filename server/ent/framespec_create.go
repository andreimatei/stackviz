// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stacksviz/ent/collectspec"
	"stacksviz/ent/framespec"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FrameSpecCreate is the builder for creating a FrameSpec entity.
type FrameSpecCreate struct {
	config
	mutation *FrameSpecMutation
	hooks    []Hook
}

// SetFrame sets the "frame" field.
func (fsc *FrameSpecCreate) SetFrame(s string) *FrameSpecCreate {
	fsc.mutation.SetFrame(s)
	return fsc
}

// SetCollectSpec sets the "collect_spec" field.
func (fsc *FrameSpecCreate) SetCollectSpec(i int) *FrameSpecCreate {
	fsc.mutation.SetCollectSpec(i)
	return fsc
}

// SetCollectExpressions sets the "collect_expressions" field.
func (fsc *FrameSpecCreate) SetCollectExpressions(s []string) *FrameSpecCreate {
	fsc.mutation.SetCollectExpressions(s)
	return fsc
}

// SetFlightRecorderEvents sets the "flight_recorder_events" field.
func (fsc *FrameSpecCreate) SetFlightRecorderEvents(s []string) *FrameSpecCreate {
	fsc.mutation.SetFlightRecorderEvents(s)
	return fsc
}

// SetCollectSpecRefID sets the "collect_spec_ref" edge to the CollectSpec entity by ID.
func (fsc *FrameSpecCreate) SetCollectSpecRefID(id int) *FrameSpecCreate {
	fsc.mutation.SetCollectSpecRefID(id)
	return fsc
}

// SetCollectSpecRef sets the "collect_spec_ref" edge to the CollectSpec entity.
func (fsc *FrameSpecCreate) SetCollectSpecRef(c *CollectSpec) *FrameSpecCreate {
	return fsc.SetCollectSpecRefID(c.ID)
}

// Mutation returns the FrameSpecMutation object of the builder.
func (fsc *FrameSpecCreate) Mutation() *FrameSpecMutation {
	return fsc.mutation
}

// Save creates the FrameSpec in the database.
func (fsc *FrameSpecCreate) Save(ctx context.Context) (*FrameSpec, error) {
	return withHooks(ctx, fsc.sqlSave, fsc.mutation, fsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fsc *FrameSpecCreate) SaveX(ctx context.Context) *FrameSpec {
	v, err := fsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fsc *FrameSpecCreate) Exec(ctx context.Context) error {
	_, err := fsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fsc *FrameSpecCreate) ExecX(ctx context.Context) {
	if err := fsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fsc *FrameSpecCreate) check() error {
	if _, ok := fsc.mutation.Frame(); !ok {
		return &ValidationError{Name: "frame", err: errors.New(`ent: missing required field "FrameSpec.frame"`)}
	}
	if _, ok := fsc.mutation.CollectSpec(); !ok {
		return &ValidationError{Name: "collect_spec", err: errors.New(`ent: missing required field "FrameSpec.collect_spec"`)}
	}
	if _, ok := fsc.mutation.CollectExpressions(); !ok {
		return &ValidationError{Name: "collect_expressions", err: errors.New(`ent: missing required field "FrameSpec.collect_expressions"`)}
	}
	if _, ok := fsc.mutation.FlightRecorderEvents(); !ok {
		return &ValidationError{Name: "flight_recorder_events", err: errors.New(`ent: missing required field "FrameSpec.flight_recorder_events"`)}
	}
	if _, ok := fsc.mutation.CollectSpecRefID(); !ok {
		return &ValidationError{Name: "collect_spec_ref", err: errors.New(`ent: missing required edge "FrameSpec.collect_spec_ref"`)}
	}
	return nil
}

func (fsc *FrameSpecCreate) sqlSave(ctx context.Context) (*FrameSpec, error) {
	if err := fsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fsc.mutation.id = &_node.ID
	fsc.mutation.done = true
	return _node, nil
}

func (fsc *FrameSpecCreate) createSpec() (*FrameSpec, *sqlgraph.CreateSpec) {
	var (
		_node = &FrameSpec{config: fsc.config}
		_spec = sqlgraph.NewCreateSpec(framespec.Table, sqlgraph.NewFieldSpec(framespec.FieldID, field.TypeInt))
	)
	if value, ok := fsc.mutation.Frame(); ok {
		_spec.SetField(framespec.FieldFrame, field.TypeString, value)
		_node.Frame = value
	}
	if value, ok := fsc.mutation.CollectExpressions(); ok {
		_spec.SetField(framespec.FieldCollectExpressions, field.TypeJSON, value)
		_node.CollectExpressions = value
	}
	if value, ok := fsc.mutation.FlightRecorderEvents(); ok {
		_spec.SetField(framespec.FieldFlightRecorderEvents, field.TypeJSON, value)
		_node.FlightRecorderEvents = value
	}
	if nodes := fsc.mutation.CollectSpecRefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   framespec.CollectSpecRefTable,
			Columns: []string{framespec.CollectSpecRefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(collectspec.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CollectSpec = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FrameSpecCreateBulk is the builder for creating many FrameSpec entities in bulk.
type FrameSpecCreateBulk struct {
	config
	builders []*FrameSpecCreate
}

// Save creates the FrameSpec entities in the database.
func (fscb *FrameSpecCreateBulk) Save(ctx context.Context) ([]*FrameSpec, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fscb.builders))
	nodes := make([]*FrameSpec, len(fscb.builders))
	mutators := make([]Mutator, len(fscb.builders))
	for i := range fscb.builders {
		func(i int, root context.Context) {
			builder := fscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FrameSpecMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fscb *FrameSpecCreateBulk) SaveX(ctx context.Context) []*FrameSpec {
	v, err := fscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fscb *FrameSpecCreateBulk) Exec(ctx context.Context) error {
	_, err := fscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fscb *FrameSpecCreateBulk) ExecX(ctx context.Context) {
	if err := fscb.Exec(ctx); err != nil {
		panic(err)
	}
}
