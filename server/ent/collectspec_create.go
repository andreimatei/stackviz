// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"stacksviz/ent/collectspec"
	"stacksviz/ent/frameinfo"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CollectSpecCreate is the builder for creating a CollectSpec entity.
type CollectSpecCreate struct {
	config
	mutation *CollectSpecMutation
	hooks    []Hook
}

// AddFrameIDs adds the "frames" edge to the FrameInfo entity by IDs.
func (csc *CollectSpecCreate) AddFrameIDs(ids ...int) *CollectSpecCreate {
	csc.mutation.AddFrameIDs(ids...)
	return csc
}

// AddFrames adds the "frames" edges to the FrameInfo entity.
func (csc *CollectSpecCreate) AddFrames(f ...*FrameInfo) *CollectSpecCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return csc.AddFrameIDs(ids...)
}

// Mutation returns the CollectSpecMutation object of the builder.
func (csc *CollectSpecCreate) Mutation() *CollectSpecMutation {
	return csc.mutation
}

// Save creates the CollectSpec in the database.
func (csc *CollectSpecCreate) Save(ctx context.Context) (*CollectSpec, error) {
	return withHooks(ctx, csc.sqlSave, csc.mutation, csc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (csc *CollectSpecCreate) SaveX(ctx context.Context) *CollectSpec {
	v, err := csc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (csc *CollectSpecCreate) Exec(ctx context.Context) error {
	_, err := csc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csc *CollectSpecCreate) ExecX(ctx context.Context) {
	if err := csc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (csc *CollectSpecCreate) check() error {
	return nil
}

func (csc *CollectSpecCreate) sqlSave(ctx context.Context) (*CollectSpec, error) {
	if err := csc.check(); err != nil {
		return nil, err
	}
	_node, _spec := csc.createSpec()
	if err := sqlgraph.CreateNode(ctx, csc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	csc.mutation.id = &_node.ID
	csc.mutation.done = true
	return _node, nil
}

func (csc *CollectSpecCreate) createSpec() (*CollectSpec, *sqlgraph.CreateSpec) {
	var (
		_node = &CollectSpec{config: csc.config}
		_spec = sqlgraph.NewCreateSpec(collectspec.Table, sqlgraph.NewFieldSpec(collectspec.FieldID, field.TypeInt))
	)
	if nodes := csc.mutation.FramesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collectspec.FramesTable,
			Columns: []string{collectspec.FramesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(frameinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CollectSpecCreateBulk is the builder for creating many CollectSpec entities in bulk.
type CollectSpecCreateBulk struct {
	config
	builders []*CollectSpecCreate
}

// Save creates the CollectSpec entities in the database.
func (cscb *CollectSpecCreateBulk) Save(ctx context.Context) ([]*CollectSpec, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cscb.builders))
	nodes := make([]*CollectSpec, len(cscb.builders))
	mutators := make([]Mutator, len(cscb.builders))
	for i := range cscb.builders {
		func(i int, root context.Context) {
			builder := cscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CollectSpecMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cscb *CollectSpecCreateBulk) SaveX(ctx context.Context) []*CollectSpec {
	v, err := cscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cscb *CollectSpecCreateBulk) Exec(ctx context.Context) error {
	_, err := cscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cscb *CollectSpecCreateBulk) ExecX(ctx context.Context) {
	if err := cscb.Exec(ctx); err != nil {
		panic(err)
	}
}
