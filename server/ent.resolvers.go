package server

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"fmt"
	"stacksviz/ent"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {
	dbClient := ent.FromContext(ctx)
	return dbClient.Noder(ctx, id)
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []int) ([]ent.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// CollectSpecs is the resolver for the collectSpecs field.
func (r *queryResolver) CollectSpecs(ctx context.Context) ([]ent.CollectSpec, error) {
	panic(fmt.Errorf("not implemented: CollectSpecs - collectSpecs"))
}

// Collections is the resolver for the collections field.
func (r *queryResolver) Collections(ctx context.Context) ([]ent.Collection, error) {
	dbClient := ent.FromContext(ctx)
	results, err := dbClient.Collection.Query().All(ctx)
	if err != nil {
		return nil, err
	}
	return flatten(results), nil
}

// FrameSpecs is the resolver for the frameSpecs field.
func (r *queryResolver) FrameSpecs(ctx context.Context) ([]ent.FrameSpec, error) {
	panic("unimplemented - FrameSpecs")
}

// ProcessSnapshots is the resolver for the processSnapshots field.
func (r *queryResolver) ProcessSnapshots(ctx context.Context) ([]ent.ProcessSnapshot, error) {
	dbClient := ent.FromContext(ctx)
	results, err := dbClient.ProcessSnapshot.Query().All(ctx)
	if err != nil {
		return nil, err
	}
	return flatten(results), nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
