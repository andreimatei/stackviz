directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type CollectSpec implements Node {
  id: ID!
  frames: [FrameSpec!]
}
"""
CollectSpecWhereInput is used for filtering CollectSpec objects.
Input was generated by ent.
"""
input CollectSpecWhereInput {
  not: CollectSpecWhereInput
  and: [CollectSpecWhereInput!]
  or: [CollectSpecWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """frames edge predicates"""
  hasFrames: Boolean
  hasFramesWith: [FrameSpecWhereInput!]
}
type Collection implements Node {
  id: ID!
  name: String!
  """The specification used to create this collection"""
  collectSpec: Int!
  processSnapshots: [ProcessSnapshot!]
}
"""
CollectionWhereInput is used for filtering Collection objects.
Input was generated by ent.
"""
input CollectionWhereInput {
  not: CollectionWhereInput
  and: [CollectionWhereInput!]
  or: [CollectionWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """collect_spec field predicates"""
  collectSpec: Int
  collectSpecNEQ: Int
  collectSpecIn: [Int!]
  collectSpecNotIn: [Int!]
  collectSpecGT: Int
  collectSpecGTE: Int
  collectSpecLT: Int
  collectSpecLTE: Int
  """process_snapshots edge predicates"""
  hasProcessSnapshots: Boolean
  hasProcessSnapshotsWith: [ProcessSnapshotWhereInput!]
}
"""
CreateCollectSpecInput is used for create CollectSpec object.
Input was generated by ent.
"""
input CreateCollectSpecInput {
  frameIDs: [ID!]
}
"""
CreateCollectionInput is used for create Collection object.
Input was generated by ent.
"""
input CreateCollectionInput {
  name: String!
  """The specification used to create this collection"""
  collectSpec: Int!
  processSnapshotIDs: [ID!]
}
"""
CreateFrameSpecInput is used for create FrameSpec object.
Input was generated by ent.
"""
input CreateFrameSpecInput {
  frame: String!
  collectExpressions: [String!]!
  flightRecorderEvents: [String!]!
  parentcollectionID: ID!
}
"""
CreateProcessSnapshotInput is used for create ProcessSnapshot object.
Input was generated by ent.
"""
input CreateProcessSnapshotInput {
  processID: String!
  snapshot: String!
  """JSON map of goroutine ID to map from frame index to array of CapturedExpr."""
  framesOfInterest: String
  flightRecorderData: Map
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type FrameSpec implements Node {
  id: ID!
  frame: String!
  """The parent collection spec"""
  collectSpecID: ID!
  collectExpressions: [String!]!
  flightRecorderEvents: [String!]!
  """The parent collection spec"""
  parentcollection: CollectSpec! @goField(name: "ParentCollection", forceResolver: false)
}
"""
FrameSpecWhereInput is used for filtering FrameSpec objects.
Input was generated by ent.
"""
input FrameSpecWhereInput {
  not: FrameSpecWhereInput
  and: [FrameSpecWhereInput!]
  or: [FrameSpecWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """frame field predicates"""
  frame: String
  frameNEQ: String
  frameIn: [String!]
  frameNotIn: [String!]
  frameGT: String
  frameGTE: String
  frameLT: String
  frameLTE: String
  frameContains: String
  frameHasPrefix: String
  frameHasSuffix: String
  frameEqualFold: String
  frameContainsFold: String
  """collect_spec_id field predicates"""
  collectSpecID: ID
  collectSpecIDNEQ: ID
  collectSpecIDIn: [ID!]
  collectSpecIDNotIn: [ID!]
  """parentCollection edge predicates"""
  hasParentCollection: Boolean
  hasParentCollectionWith: [CollectSpecWhereInput!]
}
"""The builtin Map type"""
scalar Map
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "stacksviz/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type ProcessSnapshot implements Node {
  id: ID!
  processID: String!
  snapshot: String!
  """JSON map of goroutine ID to map from frame index to array of CapturedExpr."""
  framesOfInterest: String
  flightRecorderData: Map
}
"""
ProcessSnapshotWhereInput is used for filtering ProcessSnapshot objects.
Input was generated by ent.
"""
input ProcessSnapshotWhereInput {
  not: ProcessSnapshotWhereInput
  and: [ProcessSnapshotWhereInput!]
  or: [ProcessSnapshotWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """process_id field predicates"""
  processID: String
  processIDNEQ: String
  processIDIn: [String!]
  processIDNotIn: [String!]
  processIDGT: String
  processIDGTE: String
  processIDLT: String
  processIDLTE: String
  processIDContains: String
  processIDHasPrefix: String
  processIDHasSuffix: String
  processIDEqualFold: String
  processIDContainsFold: String
  """snapshot field predicates"""
  snapshot: String
  snapshotNEQ: String
  snapshotIn: [String!]
  snapshotNotIn: [String!]
  snapshotGT: String
  snapshotGTE: String
  snapshotLT: String
  snapshotLTE: String
  snapshotContains: String
  snapshotHasPrefix: String
  snapshotHasSuffix: String
  snapshotEqualFold: String
  snapshotContainsFold: String
  """frames_of_interest field predicates"""
  framesOfInterest: String
  framesOfInterestNEQ: String
  framesOfInterestIn: [String!]
  framesOfInterestNotIn: [String!]
  framesOfInterestGT: String
  framesOfInterestGTE: String
  framesOfInterestLT: String
  framesOfInterestLTE: String
  framesOfInterestContains: String
  framesOfInterestHasPrefix: String
  framesOfInterestHasSuffix: String
  framesOfInterestIsNil: Boolean
  framesOfInterestNotNil: Boolean
  framesOfInterestEqualFold: String
  framesOfInterestContainsFold: String
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  collectSpecs: [CollectSpec!]!
  collections: [Collection!]!
  frameSpecs: [FrameSpec!]!
  processSnapshots: [ProcessSnapshot!]!
}
