// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"stacksviz/ent/collectspec"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// CollectSpec is the model entity for the CollectSpec schema.
type CollectSpec struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CollectSpecQuery when eager-loading is set.
	Edges        CollectSpecEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CollectSpecEdges holds the relations/edges for other nodes in the graph.
type CollectSpecEdges struct {
	// Frames holds the value of the frames edge.
	Frames []*FrameInfo `json:"frames,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int

	namedFrames map[string][]*FrameInfo
}

// FramesOrErr returns the Frames value or an error if the edge
// was not loaded in eager-loading.
func (e CollectSpecEdges) FramesOrErr() ([]*FrameInfo, error) {
	if e.loadedTypes[0] {
		return e.Frames, nil
	}
	return nil, &NotLoadedError{edge: "frames"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CollectSpec) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case collectspec.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CollectSpec fields.
func (cs *CollectSpec) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case collectspec.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cs.ID = int(value.Int64)
		default:
			cs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the CollectSpec.
// This includes values selected through modifiers, order, etc.
func (cs *CollectSpec) Value(name string) (ent.Value, error) {
	return cs.selectValues.Get(name)
}

// QueryFrames queries the "frames" edge of the CollectSpec entity.
func (cs *CollectSpec) QueryFrames() *FrameInfoQuery {
	return NewCollectSpecClient(cs.config).QueryFrames(cs)
}

// Update returns a builder for updating this CollectSpec.
// Note that you need to call CollectSpec.Unwrap() before calling this method if this CollectSpec
// was returned from a transaction, and the transaction was committed or rolled back.
func (cs *CollectSpec) Update() *CollectSpecUpdateOne {
	return NewCollectSpecClient(cs.config).UpdateOne(cs)
}

// Unwrap unwraps the CollectSpec entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cs *CollectSpec) Unwrap() *CollectSpec {
	_tx, ok := cs.config.driver.(*txDriver)
	if !ok {
		panic("ent: CollectSpec is not a transactional entity")
	}
	cs.config.driver = _tx.drv
	return cs
}

// String implements the fmt.Stringer.
func (cs *CollectSpec) String() string {
	var builder strings.Builder
	builder.WriteString("CollectSpec(")
	builder.WriteString(fmt.Sprintf("id=%v", cs.ID))
	builder.WriteByte(')')
	return builder.String()
}

// NamedFrames returns the Frames named value or an error if the edge was not
// loaded in eager-loading with this name.
func (cs *CollectSpec) NamedFrames(name string) ([]*FrameInfo, error) {
	if cs.Edges.namedFrames == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := cs.Edges.namedFrames[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (cs *CollectSpec) appendNamedFrames(name string, edges ...*FrameInfo) {
	if cs.Edges.namedFrames == nil {
		cs.Edges.namedFrames = make(map[string][]*FrameInfo)
	}
	if len(edges) == 0 {
		cs.Edges.namedFrames[name] = []*FrameInfo{}
	} else {
		cs.Edges.namedFrames[name] = append(cs.Edges.namedFrames[name], edges...)
	}
}

// CollectSpecs is a parsable slice of CollectSpec.
type CollectSpecs []*CollectSpec
