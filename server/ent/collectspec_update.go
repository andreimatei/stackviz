// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stacksviz/ent/collectspec"
	"stacksviz/ent/frameinfo"
	"stacksviz/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CollectSpecUpdate is the builder for updating CollectSpec entities.
type CollectSpecUpdate struct {
	config
	hooks    []Hook
	mutation *CollectSpecMutation
}

// Where appends a list predicates to the CollectSpecUpdate builder.
func (csu *CollectSpecUpdate) Where(ps ...predicate.CollectSpec) *CollectSpecUpdate {
	csu.mutation.Where(ps...)
	return csu
}

// AddFrameIDs adds the "frames" edge to the FrameInfo entity by IDs.
func (csu *CollectSpecUpdate) AddFrameIDs(ids ...int) *CollectSpecUpdate {
	csu.mutation.AddFrameIDs(ids...)
	return csu
}

// AddFrames adds the "frames" edges to the FrameInfo entity.
func (csu *CollectSpecUpdate) AddFrames(f ...*FrameInfo) *CollectSpecUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return csu.AddFrameIDs(ids...)
}

// Mutation returns the CollectSpecMutation object of the builder.
func (csu *CollectSpecUpdate) Mutation() *CollectSpecMutation {
	return csu.mutation
}

// ClearFrames clears all "frames" edges to the FrameInfo entity.
func (csu *CollectSpecUpdate) ClearFrames() *CollectSpecUpdate {
	csu.mutation.ClearFrames()
	return csu
}

// RemoveFrameIDs removes the "frames" edge to FrameInfo entities by IDs.
func (csu *CollectSpecUpdate) RemoveFrameIDs(ids ...int) *CollectSpecUpdate {
	csu.mutation.RemoveFrameIDs(ids...)
	return csu
}

// RemoveFrames removes "frames" edges to FrameInfo entities.
func (csu *CollectSpecUpdate) RemoveFrames(f ...*FrameInfo) *CollectSpecUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return csu.RemoveFrameIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (csu *CollectSpecUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, csu.sqlSave, csu.mutation, csu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csu *CollectSpecUpdate) SaveX(ctx context.Context) int {
	affected, err := csu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (csu *CollectSpecUpdate) Exec(ctx context.Context) error {
	_, err := csu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csu *CollectSpecUpdate) ExecX(ctx context.Context) {
	if err := csu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csu *CollectSpecUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(collectspec.Table, collectspec.Columns, sqlgraph.NewFieldSpec(collectspec.FieldID, field.TypeInt))
	if ps := csu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if csu.mutation.FramesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collectspec.FramesTable,
			Columns: []string{collectspec.FramesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(frameinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.RemovedFramesIDs(); len(nodes) > 0 && !csu.mutation.FramesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collectspec.FramesTable,
			Columns: []string{collectspec.FramesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(frameinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csu.mutation.FramesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collectspec.FramesTable,
			Columns: []string{collectspec.FramesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(frameinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, csu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collectspec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	csu.mutation.done = true
	return n, nil
}

// CollectSpecUpdateOne is the builder for updating a single CollectSpec entity.
type CollectSpecUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CollectSpecMutation
}

// AddFrameIDs adds the "frames" edge to the FrameInfo entity by IDs.
func (csuo *CollectSpecUpdateOne) AddFrameIDs(ids ...int) *CollectSpecUpdateOne {
	csuo.mutation.AddFrameIDs(ids...)
	return csuo
}

// AddFrames adds the "frames" edges to the FrameInfo entity.
func (csuo *CollectSpecUpdateOne) AddFrames(f ...*FrameInfo) *CollectSpecUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return csuo.AddFrameIDs(ids...)
}

// Mutation returns the CollectSpecMutation object of the builder.
func (csuo *CollectSpecUpdateOne) Mutation() *CollectSpecMutation {
	return csuo.mutation
}

// ClearFrames clears all "frames" edges to the FrameInfo entity.
func (csuo *CollectSpecUpdateOne) ClearFrames() *CollectSpecUpdateOne {
	csuo.mutation.ClearFrames()
	return csuo
}

// RemoveFrameIDs removes the "frames" edge to FrameInfo entities by IDs.
func (csuo *CollectSpecUpdateOne) RemoveFrameIDs(ids ...int) *CollectSpecUpdateOne {
	csuo.mutation.RemoveFrameIDs(ids...)
	return csuo
}

// RemoveFrames removes "frames" edges to FrameInfo entities.
func (csuo *CollectSpecUpdateOne) RemoveFrames(f ...*FrameInfo) *CollectSpecUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return csuo.RemoveFrameIDs(ids...)
}

// Where appends a list predicates to the CollectSpecUpdate builder.
func (csuo *CollectSpecUpdateOne) Where(ps ...predicate.CollectSpec) *CollectSpecUpdateOne {
	csuo.mutation.Where(ps...)
	return csuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (csuo *CollectSpecUpdateOne) Select(field string, fields ...string) *CollectSpecUpdateOne {
	csuo.fields = append([]string{field}, fields...)
	return csuo
}

// Save executes the query and returns the updated CollectSpec entity.
func (csuo *CollectSpecUpdateOne) Save(ctx context.Context) (*CollectSpec, error) {
	return withHooks(ctx, csuo.sqlSave, csuo.mutation, csuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (csuo *CollectSpecUpdateOne) SaveX(ctx context.Context) *CollectSpec {
	node, err := csuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (csuo *CollectSpecUpdateOne) Exec(ctx context.Context) error {
	_, err := csuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (csuo *CollectSpecUpdateOne) ExecX(ctx context.Context) {
	if err := csuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (csuo *CollectSpecUpdateOne) sqlSave(ctx context.Context) (_node *CollectSpec, err error) {
	_spec := sqlgraph.NewUpdateSpec(collectspec.Table, collectspec.Columns, sqlgraph.NewFieldSpec(collectspec.FieldID, field.TypeInt))
	id, ok := csuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CollectSpec.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := csuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, collectspec.FieldID)
		for _, f := range fields {
			if !collectspec.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != collectspec.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := csuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if csuo.mutation.FramesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collectspec.FramesTable,
			Columns: []string{collectspec.FramesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(frameinfo.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.RemovedFramesIDs(); len(nodes) > 0 && !csuo.mutation.FramesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collectspec.FramesTable,
			Columns: []string{collectspec.FramesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(frameinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := csuo.mutation.FramesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   collectspec.FramesTable,
			Columns: []string{collectspec.FramesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(frameinfo.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &CollectSpec{config: csuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, csuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{collectspec.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	csuo.mutation.done = true
	return _node, nil
}
