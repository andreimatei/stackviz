import { gql } from 'apollo-angular';
import { Injectable } from '@angular/core';
import * as Apollo from 'apollo-angular';
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: number; output: number; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /**
   * Define a Relay Cursor type:
   * https://relay.dev/graphql/connections.htm#sec-Cursor
   */
  Cursor: { input: any; output: any; }
  /** The builtin Map type */
  Map: { input: any; output: any; }
};

export type CollectSpec = Node & {
  __typename?: 'CollectSpec';
  frames?: Maybe<Array<FrameSpec>>;
  id: Scalars['ID']['output'];
};

/**
 * CollectSpecWhereInput is used for filtering CollectSpec objects.
 * Input was generated by ent.
 */
export type CollectSpecWhereInput = {
  and?: InputMaybe<Array<CollectSpecWhereInput>>;
  /** frames edge predicates */
  hasFrames?: InputMaybe<Scalars['Boolean']['input']>;
  hasFramesWith?: InputMaybe<Array<FrameSpecWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<CollectSpecWhereInput>;
  or?: InputMaybe<Array<CollectSpecWhereInput>>;
};

export type CollectedVar = {
  __typename?: 'CollectedVar';
  Expr: Scalars['String']['output'];
  Links: Array<Link>;
  Value: Scalars['String']['output'];
};

export type Collection = Node & {
  __typename?: 'Collection';
  /** The specification used to create this collection */
  collectSpec: Scalars['Int']['output'];
  id: Scalars['ID']['output'];
  name: Scalars['String']['output'];
  processSnapshots?: Maybe<Array<ProcessSnapshot>>;
};

/**
 * CollectionWhereInput is used for filtering Collection objects.
 * Input was generated by ent.
 */
export type CollectionWhereInput = {
  and?: InputMaybe<Array<CollectionWhereInput>>;
  /** collect_spec field predicates */
  collectSpec?: InputMaybe<Scalars['Int']['input']>;
  collectSpecGT?: InputMaybe<Scalars['Int']['input']>;
  collectSpecGTE?: InputMaybe<Scalars['Int']['input']>;
  collectSpecIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  collectSpecLT?: InputMaybe<Scalars['Int']['input']>;
  collectSpecLTE?: InputMaybe<Scalars['Int']['input']>;
  collectSpecNEQ?: InputMaybe<Scalars['Int']['input']>;
  collectSpecNotIn?: InputMaybe<Array<Scalars['Int']['input']>>;
  /** process_snapshots edge predicates */
  hasProcessSnapshots?: InputMaybe<Scalars['Boolean']['input']>;
  hasProcessSnapshotsWith?: InputMaybe<Array<ProcessSnapshotWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** name field predicates */
  name?: InputMaybe<Scalars['String']['input']>;
  nameContains?: InputMaybe<Scalars['String']['input']>;
  nameContainsFold?: InputMaybe<Scalars['String']['input']>;
  nameEqualFold?: InputMaybe<Scalars['String']['input']>;
  nameGT?: InputMaybe<Scalars['String']['input']>;
  nameGTE?: InputMaybe<Scalars['String']['input']>;
  nameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  nameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  nameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  nameLT?: InputMaybe<Scalars['String']['input']>;
  nameLTE?: InputMaybe<Scalars['String']['input']>;
  nameNEQ?: InputMaybe<Scalars['String']['input']>;
  nameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  not?: InputMaybe<CollectionWhereInput>;
  or?: InputMaybe<Array<CollectionWhereInput>>;
};

/**
 * CreateCollectSpecInput is used for create CollectSpec object.
 * Input was generated by ent.
 */
export type CreateCollectSpecInput = {
  frameIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * CreateCollectionInput is used for create Collection object.
 * Input was generated by ent.
 */
export type CreateCollectionInput = {
  /** The specification used to create this collection */
  collectSpec: Scalars['Int']['input'];
  name: Scalars['String']['input'];
  processSnapshotIDs?: InputMaybe<Array<Scalars['ID']['input']>>;
};

/**
 * CreateFrameSpecInput is used for create FrameSpec object.
 * Input was generated by ent.
 */
export type CreateFrameSpecInput = {
  collectExpressions: Array<Scalars['String']['input']>;
  flightRecorderEvents: Array<Scalars['String']['input']>;
  frame: Scalars['String']['input'];
  parentcollectionID: Scalars['ID']['input'];
};

/**
 * CreateProcessSnapshotInput is used for create ProcessSnapshot object.
 * Input was generated by ent.
 */
export type CreateProcessSnapshotInput = {
  flightRecorderData?: InputMaybe<Scalars['Map']['input']>;
  framesOfInterest?: InputMaybe<Scalars['String']['input']>;
  processID: Scalars['String']['input'];
  snapshot: Scalars['String']['input'];
};

export type FieldInfo = {
  __typename?: 'FieldInfo';
  Embedded: Scalars['Boolean']['output'];
  Name: Scalars['String']['output'];
  Type: Scalars['String']['output'];
};

export type FrameInfo = {
  __typename?: 'FrameInfo';
  File: Scalars['String']['output'];
  Func: Scalars['String']['output'];
  Line: Scalars['Int']['output'];
};

export type FrameSpec = Node & {
  __typename?: 'FrameSpec';
  collectExpressions: Array<Scalars['String']['output']>;
  /** The parent collection spec */
  collectSpecID: Scalars['ID']['output'];
  flightRecorderEvents: Array<Scalars['String']['output']>;
  frame: Scalars['String']['output'];
  id: Scalars['ID']['output'];
  /** The parent collection spec */
  parentcollection: CollectSpec;
};

/**
 * FrameSpecWhereInput is used for filtering FrameSpec objects.
 * Input was generated by ent.
 */
export type FrameSpecWhereInput = {
  and?: InputMaybe<Array<FrameSpecWhereInput>>;
  /** collect_spec_id field predicates */
  collectSpecID?: InputMaybe<Scalars['ID']['input']>;
  collectSpecIDIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  collectSpecIDNEQ?: InputMaybe<Scalars['ID']['input']>;
  collectSpecIDNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  /** frame field predicates */
  frame?: InputMaybe<Scalars['String']['input']>;
  frameContains?: InputMaybe<Scalars['String']['input']>;
  frameContainsFold?: InputMaybe<Scalars['String']['input']>;
  frameEqualFold?: InputMaybe<Scalars['String']['input']>;
  frameGT?: InputMaybe<Scalars['String']['input']>;
  frameGTE?: InputMaybe<Scalars['String']['input']>;
  frameHasPrefix?: InputMaybe<Scalars['String']['input']>;
  frameHasSuffix?: InputMaybe<Scalars['String']['input']>;
  frameIn?: InputMaybe<Array<Scalars['String']['input']>>;
  frameLT?: InputMaybe<Scalars['String']['input']>;
  frameLTE?: InputMaybe<Scalars['String']['input']>;
  frameNEQ?: InputMaybe<Scalars['String']['input']>;
  frameNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** parentCollection edge predicates */
  hasParentCollection?: InputMaybe<Scalars['Boolean']['input']>;
  hasParentCollectionWith?: InputMaybe<Array<CollectSpecWhereInput>>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<FrameSpecWhereInput>;
  or?: InputMaybe<Array<FrameSpecWhereInput>>;
};

export type GoroutineInfo = {
  __typename?: 'GoroutineInfo';
  Frames: Array<FrameInfo>;
  ID: Scalars['Int']['output'];
  Vars: Array<CollectedVar>;
};

export type GoroutinesGroup = {
  __typename?: 'GoroutinesGroup';
  Frames: Array<FrameInfo>;
  IDs: Array<Scalars['Int']['output']>;
  Vars: Array<CollectedVar>;
};

export type Link = {
  __typename?: 'Link';
  FrameIdx: Scalars['Int']['output'];
  GoroutineID: Scalars['Int']['output'];
  SnapshotID: Scalars['Int']['output'];
};

export type Mutation = {
  __typename?: 'Mutation';
  addExprToCollectSpec: CollectSpec;
  addFlightRecorderEventToFrameSpec: FrameSpec;
  collectServiceSnapshots?: Maybe<Collection>;
  removeExprFromCollectSpec: CollectSpec;
  removeFlightRecorderEventFromCollectSpec: CollectSpec;
  syncFlightRecorder?: Maybe<Scalars['Boolean']['output']>;
};


export type MutationAddExprToCollectSpecArgs = {
  expr: Scalars['String']['input'];
  frame: Scalars['String']['input'];
};


export type MutationAddFlightRecorderEventToFrameSpecArgs = {
  collectSpecID: Scalars['ID']['input'];
  expr: Scalars['String']['input'];
  frame: Scalars['String']['input'];
  keyExpr: Scalars['String']['input'];
};


export type MutationRemoveExprFromCollectSpecArgs = {
  expr: Scalars['String']['input'];
  frame: Scalars['String']['input'];
};


export type MutationRemoveFlightRecorderEventFromCollectSpecArgs = {
  expr: Scalars['String']['input'];
  frame: Scalars['String']['input'];
  keyExpr: Scalars['String']['input'];
};


export type MutationSyncFlightRecorderArgs = {
  collectSpecID: Scalars['ID']['input'];
};

/**
 * An object with an ID.
 * Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
 */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID']['output'];
};

/** Possible directions in which to order a list of items when provided an `orderBy` argument. */
export enum OrderDirection {
  /** Specifies an ascending order for a given `orderBy` argument. */
  Asc = 'ASC',
  /** Specifies a descending order for a given `orderBy` argument. */
  Desc = 'DESC'
}

/**
 * Information about pagination in a connection.
 * https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
 */
export type PageInfo = {
  __typename?: 'PageInfo';
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['Cursor']['output']>;
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean']['output'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean']['output'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['Cursor']['output']>;
};

export type ProcessSnapshot = Node & {
  __typename?: 'ProcessSnapshot';
  flightRecorderData?: Maybe<Scalars['Map']['output']>;
  framesOfInterest?: Maybe<Scalars['String']['output']>;
  id: Scalars['ID']['output'];
  processID: Scalars['String']['output'];
  snapshot: Scalars['String']['output'];
};

/**
 * ProcessSnapshotWhereInput is used for filtering ProcessSnapshot objects.
 * Input was generated by ent.
 */
export type ProcessSnapshotWhereInput = {
  and?: InputMaybe<Array<ProcessSnapshotWhereInput>>;
  /** frames_of_interest field predicates */
  framesOfInterest?: InputMaybe<Scalars['String']['input']>;
  framesOfInterestContains?: InputMaybe<Scalars['String']['input']>;
  framesOfInterestContainsFold?: InputMaybe<Scalars['String']['input']>;
  framesOfInterestEqualFold?: InputMaybe<Scalars['String']['input']>;
  framesOfInterestGT?: InputMaybe<Scalars['String']['input']>;
  framesOfInterestGTE?: InputMaybe<Scalars['String']['input']>;
  framesOfInterestHasPrefix?: InputMaybe<Scalars['String']['input']>;
  framesOfInterestHasSuffix?: InputMaybe<Scalars['String']['input']>;
  framesOfInterestIn?: InputMaybe<Array<Scalars['String']['input']>>;
  framesOfInterestIsNil?: InputMaybe<Scalars['Boolean']['input']>;
  framesOfInterestLT?: InputMaybe<Scalars['String']['input']>;
  framesOfInterestLTE?: InputMaybe<Scalars['String']['input']>;
  framesOfInterestNEQ?: InputMaybe<Scalars['String']['input']>;
  framesOfInterestNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  framesOfInterestNotNil?: InputMaybe<Scalars['Boolean']['input']>;
  /** id field predicates */
  id?: InputMaybe<Scalars['ID']['input']>;
  idGT?: InputMaybe<Scalars['ID']['input']>;
  idGTE?: InputMaybe<Scalars['ID']['input']>;
  idIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  idLT?: InputMaybe<Scalars['ID']['input']>;
  idLTE?: InputMaybe<Scalars['ID']['input']>;
  idNEQ?: InputMaybe<Scalars['ID']['input']>;
  idNotIn?: InputMaybe<Array<Scalars['ID']['input']>>;
  not?: InputMaybe<ProcessSnapshotWhereInput>;
  or?: InputMaybe<Array<ProcessSnapshotWhereInput>>;
  /** process_id field predicates */
  processID?: InputMaybe<Scalars['String']['input']>;
  processIDContains?: InputMaybe<Scalars['String']['input']>;
  processIDContainsFold?: InputMaybe<Scalars['String']['input']>;
  processIDEqualFold?: InputMaybe<Scalars['String']['input']>;
  processIDGT?: InputMaybe<Scalars['String']['input']>;
  processIDGTE?: InputMaybe<Scalars['String']['input']>;
  processIDHasPrefix?: InputMaybe<Scalars['String']['input']>;
  processIDHasSuffix?: InputMaybe<Scalars['String']['input']>;
  processIDIn?: InputMaybe<Array<Scalars['String']['input']>>;
  processIDLT?: InputMaybe<Scalars['String']['input']>;
  processIDLTE?: InputMaybe<Scalars['String']['input']>;
  processIDNEQ?: InputMaybe<Scalars['String']['input']>;
  processIDNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  /** snapshot field predicates */
  snapshot?: InputMaybe<Scalars['String']['input']>;
  snapshotContains?: InputMaybe<Scalars['String']['input']>;
  snapshotContainsFold?: InputMaybe<Scalars['String']['input']>;
  snapshotEqualFold?: InputMaybe<Scalars['String']['input']>;
  snapshotGT?: InputMaybe<Scalars['String']['input']>;
  snapshotGTE?: InputMaybe<Scalars['String']['input']>;
  snapshotHasPrefix?: InputMaybe<Scalars['String']['input']>;
  snapshotHasSuffix?: InputMaybe<Scalars['String']['input']>;
  snapshotIn?: InputMaybe<Array<Scalars['String']['input']>>;
  snapshotLT?: InputMaybe<Scalars['String']['input']>;
  snapshotLTE?: InputMaybe<Scalars['String']['input']>;
  snapshotNEQ?: InputMaybe<Scalars['String']['input']>;
  snapshotNotIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type Query = {
  __typename?: 'Query';
  availableVars: VarsAndTypes;
  collectSpec: CollectSpec;
  collectSpecs: Array<CollectSpec>;
  collectionByID?: Maybe<Collection>;
  collections: Array<Collection>;
  frameSpecs: Array<FrameSpec>;
  frameSpecsWhere: Array<FrameSpec>;
  getTree: Scalars['String']['output'];
  goroutines: SnapshotInfo;
  /** Fetches an object given its ID. */
  node?: Maybe<Node>;
  /** Lookup nodes by a list of IDs. */
  nodes: Array<Maybe<Node>>;
  processSnapshots: Array<ProcessSnapshot>;
  typeInfo: TypeInfo;
};


export type QueryAvailableVarsArgs = {
  func: Scalars['String']['input'];
  pcOff: Scalars['Int']['input'];
};


export type QueryCollectionByIdArgs = {
  id: Scalars['ID']['input'];
};


export type QueryFrameSpecsWhereArgs = {
  where?: InputMaybe<FrameSpecWhereInput>;
};


export type QueryGetTreeArgs = {
  colID: Scalars['Int']['input'];
  filter?: InputMaybe<Scalars['String']['input']>;
  gID?: InputMaybe<Scalars['Int']['input']>;
  snapID: Scalars['Int']['input'];
};


export type QueryGoroutinesArgs = {
  colID: Scalars['Int']['input'];
  filter?: InputMaybe<Scalars['String']['input']>;
  gID?: InputMaybe<Scalars['Int']['input']>;
  snapID: Scalars['Int']['input'];
};


export type QueryNodeArgs = {
  id: Scalars['ID']['input'];
};


export type QueryNodesArgs = {
  ids: Array<Scalars['ID']['input']>;
};


export type QueryTypeInfoArgs = {
  name: Scalars['String']['input'];
};

export type SnapshotInfo = {
  __typename?: 'SnapshotInfo';
  Aggregated: Array<GoroutinesGroup>;
  FlightRecorderData?: Maybe<Scalars['Map']['output']>;
  Raw: Array<GoroutineInfo>;
};

export type TypeInfo = {
  __typename?: 'TypeInfo';
  Fields?: Maybe<Array<FieldInfo>>;
  FieldsNotLoaded: Scalars['Boolean']['output'];
  Name: Scalars['String']['output'];
};

export type VarInfo = {
  __typename?: 'VarInfo';
  FormalParameter: Scalars['Boolean']['output'];
  LoclistAvailable: Scalars['Boolean']['output'];
  Name: Scalars['String']['output'];
  Type: Scalars['String']['output'];
};

export type VarsAndTypes = {
  __typename?: 'VarsAndTypes';
  Types: Array<TypeInfo>;
  Vars: Array<VarInfo>;
};

export type AllCollectionsQueryVariables = Exact<{ [key: string]: never; }>;


export type AllCollectionsQuery = { __typename?: 'Query', collections: Array<{ __typename?: 'Collection', id: number, name: string, collectSpec: number }> };

export type GetCollectionQueryVariables = Exact<{
  colID: Scalars['ID']['input'];
}>;


export type GetCollectionQuery = { __typename?: 'Query', collectionByID?: { __typename?: 'Collection', id: number, name: string, collectSpec: number, processSnapshots?: Array<{ __typename?: 'ProcessSnapshot', id: number, processID: string }> | null } | null };

export type CollectServiceSnapshotsMutationVariables = Exact<{ [key: string]: never; }>;


export type CollectServiceSnapshotsMutation = { __typename?: 'Mutation', collectServiceSnapshots?: { __typename?: 'Collection', id: number } | null };

export type AddExprToCollectSpecMutationVariables = Exact<{
  frame: Scalars['String']['input'];
  expr: Scalars['String']['input'];
}>;


export type AddExprToCollectSpecMutation = { __typename?: 'Mutation', addExprToCollectSpec: { __typename?: 'CollectSpec', frames?: Array<{ __typename?: 'FrameSpec', frame: string, collectExpressions: Array<string>, flightRecorderEvents: Array<string> }> | null } };

export type RemoveExprFromCollectSpecMutationVariables = Exact<{
  frame: Scalars['String']['input'];
  expr: Scalars['String']['input'];
}>;


export type RemoveExprFromCollectSpecMutation = { __typename?: 'Mutation', removeExprFromCollectSpec: { __typename?: 'CollectSpec', frames?: Array<{ __typename?: 'FrameSpec', frame: string, collectExpressions: Array<string>, flightRecorderEvents: Array<string> }> | null } };

export type AddFlightRecorderEventToCollectSpecMutationVariables = Exact<{
  collectSpecID: Scalars['ID']['input'];
  frame: Scalars['String']['input'];
  expr: Scalars['String']['input'];
  keyExpr: Scalars['String']['input'];
}>;


export type AddFlightRecorderEventToCollectSpecMutation = { __typename?: 'Mutation', addFlightRecorderEventToFrameSpec: { __typename?: 'FrameSpec', frame: string, collectExpressions: Array<string>, flightRecorderEvents: Array<string> } };

export type RemoveFlightRecorderEventFromCollectSpecMutationVariables = Exact<{
  frame: Scalars['String']['input'];
  expr: Scalars['String']['input'];
  keyExpr: Scalars['String']['input'];
}>;


export type RemoveFlightRecorderEventFromCollectSpecMutation = { __typename?: 'Mutation', removeFlightRecorderEventFromCollectSpec: { __typename?: 'CollectSpec', frames?: Array<{ __typename?: 'FrameSpec', frame: string, collectExpressions: Array<string>, flightRecorderEvents: Array<string> }> | null } };

export type SyncFlightRecorderMutationVariables = Exact<{
  collectSpecID: Scalars['ID']['input'];
}>;


export type SyncFlightRecorderMutation = { __typename?: 'Mutation', syncFlightRecorder?: boolean | null };

export type GetAvailableVariablesQueryVariables = Exact<{
  func: Scalars['String']['input'];
  pcOff: Scalars['Int']['input'];
}>;


export type GetAvailableVariablesQuery = { __typename?: 'Query', availableVars: { __typename?: 'VarsAndTypes', Vars: Array<{ __typename?: 'VarInfo', Name: string, Type: string, FormalParameter: boolean, LoclistAvailable: boolean }>, Types: Array<{ __typename?: 'TypeInfo', Name: string, FieldsNotLoaded: boolean, Fields?: Array<{ __typename?: 'FieldInfo', Name: string, Type: string, Embedded: boolean }> | null }> }, frameSpecsWhere: Array<{ __typename?: 'FrameSpec', id: number, collectExpressions: Array<string>, flightRecorderEvents: Array<string> }> };

export type GetTypeInfoQueryVariables = Exact<{
  name: Scalars['String']['input'];
}>;


export type GetTypeInfoQuery = { __typename?: 'Query', typeInfo: { __typename?: 'TypeInfo', Name: string, FieldsNotLoaded: boolean, Fields?: Array<{ __typename?: 'FieldInfo', Name: string, Type: string, Embedded: boolean }> | null } };

export type GetGoroutinesQueryVariables = Exact<{
  colID: Scalars['Int']['input'];
  snapID: Scalars['Int']['input'];
  gID?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetGoroutinesQuery = { __typename?: 'Query', goroutines: { __typename?: 'SnapshotInfo', FlightRecorderData?: any | null, Raw: Array<{ __typename?: 'GoroutineInfo', ID: number, Frames: Array<{ __typename?: 'FrameInfo', Func: string, File: string, Line: number }>, Vars: Array<{ __typename?: 'CollectedVar', Expr: string, Value: string, Links: Array<{ __typename?: 'Link', SnapshotID: number, GoroutineID: number, FrameIdx: number }> }> }>, Aggregated: Array<{ __typename?: 'GoroutinesGroup', IDs: Array<number>, Frames: Array<{ __typename?: 'FrameInfo', Func: string, File: string, Line: number }>, Vars: Array<{ __typename?: 'CollectedVar', Expr: string, Value: string, Links: Array<{ __typename?: 'Link', SnapshotID: number, GoroutineID: number, FrameIdx: number }> }> }> } };

export type GetTreeQueryVariables = Exact<{
  colID: Scalars['Int']['input'];
  snapID: Scalars['Int']['input'];
  gID?: InputMaybe<Scalars['Int']['input']>;
  filter?: InputMaybe<Scalars['String']['input']>;
}>;


export type GetTreeQuery = { __typename?: 'Query', getTree: string };

export type GetFrameSpecsQueryVariables = Exact<{
  collectSpecID: Scalars['ID']['input'];
}>;


export type GetFrameSpecsQuery = { __typename?: 'Query', frameSpecsWhere: Array<{ __typename?: 'FrameSpec', id: number, frame: string, collectExpressions: Array<string>, flightRecorderEvents: Array<string> }> };

export const AllCollectionsDocument = gql`
    query AllCollections {
  collections {
    id
    name
    collectSpec
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class AllCollectionsGQL extends Apollo.Query<AllCollectionsQuery, AllCollectionsQueryVariables> {
    override document = AllCollectionsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetCollectionDocument = gql`
    query GetCollection($colID: ID!) {
  collectionByID(id: $colID) {
    id
    name
    collectSpec
    processSnapshots {
      id
      processID
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetCollectionGQL extends Apollo.Query<GetCollectionQuery, GetCollectionQueryVariables> {
    override document = GetCollectionDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const CollectServiceSnapshotsDocument = gql`
    mutation CollectServiceSnapshots {
  collectServiceSnapshots {
    id
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class CollectServiceSnapshotsGQL extends Apollo.Mutation<CollectServiceSnapshotsMutation, CollectServiceSnapshotsMutationVariables> {
    override document = CollectServiceSnapshotsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const AddExprToCollectSpecDocument = gql`
    mutation AddExprToCollectSpec($frame: String!, $expr: String!) {
  addExprToCollectSpec(frame: $frame, expr: $expr) {
    frames {
      frame
      collectExpressions
      flightRecorderEvents
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class AddExprToCollectSpecGQL extends Apollo.Mutation<AddExprToCollectSpecMutation, AddExprToCollectSpecMutationVariables> {
    override document = AddExprToCollectSpecDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const RemoveExprFromCollectSpecDocument = gql`
    mutation RemoveExprFromCollectSpec($frame: String!, $expr: String!) {
  removeExprFromCollectSpec(frame: $frame, expr: $expr) {
    frames {
      frame
      collectExpressions
      flightRecorderEvents
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class RemoveExprFromCollectSpecGQL extends Apollo.Mutation<RemoveExprFromCollectSpecMutation, RemoveExprFromCollectSpecMutationVariables> {
    override document = RemoveExprFromCollectSpecDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const AddFlightRecorderEventToCollectSpecDocument = gql`
    mutation AddFlightRecorderEventToCollectSpec($collectSpecID: ID!, $frame: String!, $expr: String!, $keyExpr: String!) {
  addFlightRecorderEventToFrameSpec(
    collectSpecID: $collectSpecID
    frame: $frame
    expr: $expr
    keyExpr: $keyExpr
  ) {
    frame
    collectExpressions
    flightRecorderEvents
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class AddFlightRecorderEventToCollectSpecGQL extends Apollo.Mutation<AddFlightRecorderEventToCollectSpecMutation, AddFlightRecorderEventToCollectSpecMutationVariables> {
    override document = AddFlightRecorderEventToCollectSpecDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const RemoveFlightRecorderEventFromCollectSpecDocument = gql`
    mutation RemoveFlightRecorderEventFromCollectSpec($frame: String!, $expr: String!, $keyExpr: String!) {
  removeFlightRecorderEventFromCollectSpec(
    frame: $frame
    expr: $expr
    keyExpr: $keyExpr
  ) {
    frames {
      frame
      collectExpressions
      flightRecorderEvents
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class RemoveFlightRecorderEventFromCollectSpecGQL extends Apollo.Mutation<RemoveFlightRecorderEventFromCollectSpecMutation, RemoveFlightRecorderEventFromCollectSpecMutationVariables> {
    override document = RemoveFlightRecorderEventFromCollectSpecDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const SyncFlightRecorderDocument = gql`
    mutation SyncFlightRecorder($collectSpecID: ID!) {
  syncFlightRecorder(collectSpecID: $collectSpecID)
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class SyncFlightRecorderGQL extends Apollo.Mutation<SyncFlightRecorderMutation, SyncFlightRecorderMutationVariables> {
    override document = SyncFlightRecorderDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetAvailableVariablesDocument = gql`
    query GetAvailableVariables($func: String!, $pcOff: Int!) {
  availableVars(func: $func, pcOff: $pcOff) {
    Vars {
      Name
      Type
      FormalParameter
      LoclistAvailable
    }
    Types {
      Name
      Fields {
        Name
        Type
        Embedded
      }
      FieldsNotLoaded
    }
  }
  frameSpecsWhere(where: {frame: $func}) {
    id
    collectExpressions
    flightRecorderEvents
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetAvailableVariablesGQL extends Apollo.Query<GetAvailableVariablesQuery, GetAvailableVariablesQueryVariables> {
    override document = GetAvailableVariablesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetTypeInfoDocument = gql`
    query GetTypeInfo($name: String!) {
  typeInfo(name: $name) {
    Name
    FieldsNotLoaded
    Fields {
      Name
      Type
      Embedded
    }
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetTypeInfoGQL extends Apollo.Query<GetTypeInfoQuery, GetTypeInfoQueryVariables> {
    override document = GetTypeInfoDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetGoroutinesDocument = gql`
    query GetGoroutines($colID: Int!, $snapID: Int!, $gID: Int, $filter: String) {
  goroutines(colID: $colID, snapID: $snapID, gID: $gID, filter: $filter) {
    Raw {
      ID
      Frames {
        Func
        File
        Line
      }
      Vars {
        Expr
        Value
        Links {
          SnapshotID
          GoroutineID
          FrameIdx
        }
      }
    }
    Aggregated {
      IDs
      Frames {
        Func
        File
        Line
      }
      Vars {
        Expr
        Value
        Links {
          SnapshotID
          GoroutineID
          FrameIdx
        }
      }
    }
    FlightRecorderData
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetGoroutinesGQL extends Apollo.Query<GetGoroutinesQuery, GetGoroutinesQueryVariables> {
    override document = GetGoroutinesDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetTreeDocument = gql`
    query GetTree($colID: Int!, $snapID: Int!, $gID: Int, $filter: String) {
  getTree(colID: $colID, snapID: $snapID, gID: $gID, filter: $filter)
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetTreeGQL extends Apollo.Query<GetTreeQuery, GetTreeQueryVariables> {
    override document = GetTreeDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }
export const GetFrameSpecsDocument = gql`
    query GetFrameSpecs($collectSpecID: ID!) {
  frameSpecsWhere(where: {collectSpecID: $collectSpecID}) {
    id
    frame
    collectExpressions
    flightRecorderEvents
  }
}
    `;

  @Injectable({
    providedIn: 'root'
  })
  export class GetFrameSpecsGQL extends Apollo.Query<GetFrameSpecsQuery, GetFrameSpecsQueryVariables> {
    override document = GetFrameSpecsDocument;
    
    constructor(apollo: Apollo.Apollo) {
      super(apollo);
    }
  }