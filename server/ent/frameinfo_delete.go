// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"stacksviz/ent/frameinfo"
	"stacksviz/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FrameInfoDelete is the builder for deleting a FrameInfo entity.
type FrameInfoDelete struct {
	config
	hooks    []Hook
	mutation *FrameInfoMutation
}

// Where appends a list predicates to the FrameInfoDelete builder.
func (fid *FrameInfoDelete) Where(ps ...predicate.FrameInfo) *FrameInfoDelete {
	fid.mutation.Where(ps...)
	return fid
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (fid *FrameInfoDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, fid.sqlExec, fid.mutation, fid.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (fid *FrameInfoDelete) ExecX(ctx context.Context) int {
	n, err := fid.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (fid *FrameInfoDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(frameinfo.Table, sqlgraph.NewFieldSpec(frameinfo.FieldID, field.TypeInt))
	if ps := fid.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, fid.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	fid.mutation.done = true
	return affected, err
}

// FrameInfoDeleteOne is the builder for deleting a single FrameInfo entity.
type FrameInfoDeleteOne struct {
	fid *FrameInfoDelete
}

// Where appends a list predicates to the FrameInfoDelete builder.
func (fido *FrameInfoDeleteOne) Where(ps ...predicate.FrameInfo) *FrameInfoDeleteOne {
	fido.fid.mutation.Where(ps...)
	return fido
}

// Exec executes the deletion query.
func (fido *FrameInfoDeleteOne) Exec(ctx context.Context) error {
	n, err := fido.fid.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{frameinfo.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (fido *FrameInfoDeleteOne) ExecX(ctx context.Context) {
	if err := fido.Exec(ctx); err != nil {
		panic(err)
	}
}
