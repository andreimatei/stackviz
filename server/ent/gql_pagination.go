// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"stacksviz/ent/collection"
	"stacksviz/ent/processsnapshot"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[int]
	PageInfo       = entgql.PageInfo[int]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// CollectionEdge is the edge representation of Collection.
type CollectionEdge struct {
	Node   *Collection `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// CollectionConnection is the connection containing edges to Collection.
type CollectionConnection struct {
	Edges      []*CollectionEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *CollectionConnection) build(nodes []*Collection, pager *collectionPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Collection
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Collection {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Collection {
			return nodes[i]
		}
	}
	c.Edges = make([]*CollectionEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &CollectionEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// CollectionPaginateOption enables pagination customization.
type CollectionPaginateOption func(*collectionPager) error

// WithCollectionOrder configures pagination ordering.
func WithCollectionOrder(order *CollectionOrder) CollectionPaginateOption {
	if order == nil {
		order = DefaultCollectionOrder
	}
	o := *order
	return func(pager *collectionPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultCollectionOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithCollectionFilter configures pagination filter.
func WithCollectionFilter(filter func(*CollectionQuery) (*CollectionQuery, error)) CollectionPaginateOption {
	return func(pager *collectionPager) error {
		if filter == nil {
			return errors.New("CollectionQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type collectionPager struct {
	reverse bool
	order   *CollectionOrder
	filter  func(*CollectionQuery) (*CollectionQuery, error)
}

func newCollectionPager(opts []CollectionPaginateOption, reverse bool) (*collectionPager, error) {
	pager := &collectionPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultCollectionOrder
	}
	return pager, nil
}

func (p *collectionPager) applyFilter(query *CollectionQuery) (*CollectionQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *collectionPager) toCursor(c *Collection) Cursor {
	return p.order.Field.toCursor(c)
}

func (p *collectionPager) applyCursors(query *CollectionQuery, after, before *Cursor) (*CollectionQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultCollectionOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *collectionPager) applyOrder(query *CollectionQuery) *CollectionQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultCollectionOrder.Field {
		query = query.Order(DefaultCollectionOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *collectionPager) orderExpr(query *CollectionQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultCollectionOrder.Field {
			b.Comma().Ident(DefaultCollectionOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Collection.
func (c *CollectionQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...CollectionPaginateOption,
) (*CollectionConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newCollectionPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if c, err = pager.applyFilter(c); err != nil {
		return nil, err
	}
	conn := &CollectionConnection{Edges: []*CollectionEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = c.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if c, err = pager.applyCursors(c, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		c.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := c.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	c = pager.applyOrder(c)
	nodes, err := c.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// CollectionOrderField defines the ordering field of Collection.
type CollectionOrderField struct {
	// Value extracts the ordering value from the given Collection.
	Value    func(*Collection) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) collection.OrderOption
	toCursor func(*Collection) Cursor
}

// CollectionOrder defines the ordering of Collection.
type CollectionOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *CollectionOrderField `json:"field"`
}

// DefaultCollectionOrder is the default ordering of Collection.
var DefaultCollectionOrder = &CollectionOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &CollectionOrderField{
		Value: func(c *Collection) (ent.Value, error) {
			return c.ID, nil
		},
		column: collection.FieldID,
		toTerm: collection.ByID,
		toCursor: func(c *Collection) Cursor {
			return Cursor{ID: c.ID}
		},
	},
}

// ToEdge converts Collection into CollectionEdge.
func (c *Collection) ToEdge(order *CollectionOrder) *CollectionEdge {
	if order == nil {
		order = DefaultCollectionOrder
	}
	return &CollectionEdge{
		Node:   c,
		Cursor: order.Field.toCursor(c),
	}
}

// ProcessSnapshotEdge is the edge representation of ProcessSnapshot.
type ProcessSnapshotEdge struct {
	Node   *ProcessSnapshot `json:"node"`
	Cursor Cursor           `json:"cursor"`
}

// ProcessSnapshotConnection is the connection containing edges to ProcessSnapshot.
type ProcessSnapshotConnection struct {
	Edges      []*ProcessSnapshotEdge `json:"edges"`
	PageInfo   PageInfo               `json:"pageInfo"`
	TotalCount int                    `json:"totalCount"`
}

func (c *ProcessSnapshotConnection) build(nodes []*ProcessSnapshot, pager *processsnapshotPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *ProcessSnapshot
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *ProcessSnapshot {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *ProcessSnapshot {
			return nodes[i]
		}
	}
	c.Edges = make([]*ProcessSnapshotEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &ProcessSnapshotEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// ProcessSnapshotPaginateOption enables pagination customization.
type ProcessSnapshotPaginateOption func(*processsnapshotPager) error

// WithProcessSnapshotOrder configures pagination ordering.
func WithProcessSnapshotOrder(order *ProcessSnapshotOrder) ProcessSnapshotPaginateOption {
	if order == nil {
		order = DefaultProcessSnapshotOrder
	}
	o := *order
	return func(pager *processsnapshotPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultProcessSnapshotOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithProcessSnapshotFilter configures pagination filter.
func WithProcessSnapshotFilter(filter func(*ProcessSnapshotQuery) (*ProcessSnapshotQuery, error)) ProcessSnapshotPaginateOption {
	return func(pager *processsnapshotPager) error {
		if filter == nil {
			return errors.New("ProcessSnapshotQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type processsnapshotPager struct {
	reverse bool
	order   *ProcessSnapshotOrder
	filter  func(*ProcessSnapshotQuery) (*ProcessSnapshotQuery, error)
}

func newProcessSnapshotPager(opts []ProcessSnapshotPaginateOption, reverse bool) (*processsnapshotPager, error) {
	pager := &processsnapshotPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultProcessSnapshotOrder
	}
	return pager, nil
}

func (p *processsnapshotPager) applyFilter(query *ProcessSnapshotQuery) (*ProcessSnapshotQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *processsnapshotPager) toCursor(ps *ProcessSnapshot) Cursor {
	return p.order.Field.toCursor(ps)
}

func (p *processsnapshotPager) applyCursors(query *ProcessSnapshotQuery, after, before *Cursor) (*ProcessSnapshotQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultProcessSnapshotOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *processsnapshotPager) applyOrder(query *ProcessSnapshotQuery) *ProcessSnapshotQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultProcessSnapshotOrder.Field {
		query = query.Order(DefaultProcessSnapshotOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *processsnapshotPager) orderExpr(query *ProcessSnapshotQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultProcessSnapshotOrder.Field {
			b.Comma().Ident(DefaultProcessSnapshotOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to ProcessSnapshot.
func (ps *ProcessSnapshotQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...ProcessSnapshotPaginateOption,
) (*ProcessSnapshotConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newProcessSnapshotPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ps, err = pager.applyFilter(ps); err != nil {
		return nil, err
	}
	conn := &ProcessSnapshotConnection{Edges: []*ProcessSnapshotEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			if conn.TotalCount, err = ps.Clone().Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ps, err = pager.applyCursors(ps, after, before); err != nil {
		return nil, err
	}
	if limit := paginateLimit(first, last); limit != 0 {
		ps.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ps.collectField(ctx, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ps = pager.applyOrder(ps)
	nodes, err := ps.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

// ProcessSnapshotOrderField defines the ordering field of ProcessSnapshot.
type ProcessSnapshotOrderField struct {
	// Value extracts the ordering value from the given ProcessSnapshot.
	Value    func(*ProcessSnapshot) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) processsnapshot.OrderOption
	toCursor func(*ProcessSnapshot) Cursor
}

// ProcessSnapshotOrder defines the ordering of ProcessSnapshot.
type ProcessSnapshotOrder struct {
	Direction OrderDirection             `json:"direction"`
	Field     *ProcessSnapshotOrderField `json:"field"`
}

// DefaultProcessSnapshotOrder is the default ordering of ProcessSnapshot.
var DefaultProcessSnapshotOrder = &ProcessSnapshotOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &ProcessSnapshotOrderField{
		Value: func(ps *ProcessSnapshot) (ent.Value, error) {
			return ps.ID, nil
		},
		column: processsnapshot.FieldID,
		toTerm: processsnapshot.ByID,
		toCursor: func(ps *ProcessSnapshot) Cursor {
			return Cursor{ID: ps.ID}
		},
	},
}

// ToEdge converts ProcessSnapshot into ProcessSnapshotEdge.
func (ps *ProcessSnapshot) ToEdge(order *ProcessSnapshotOrder) *ProcessSnapshotEdge {
	if order == nil {
		order = DefaultProcessSnapshotOrder
	}
	return &ProcessSnapshotEdge{
		Node:   ps,
		Cursor: order.Field.toCursor(ps),
	}
}
