// Code generated by ent, DO NOT EDIT.

package framespec

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the framespec type in the database.
	Label = "frame_spec"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldFrame holds the string denoting the frame field in the database.
	FieldFrame = "frame"
	// FieldParent holds the string denoting the parent field in the database.
	FieldParent = "parent"
	// FieldCollectExpressions holds the string denoting the collect_expressions field in the database.
	FieldCollectExpressions = "collect_expressions"
	// FieldFlightRecorderEvents holds the string denoting the flight_recorder_events field in the database.
	FieldFlightRecorderEvents = "flight_recorder_events"
	// EdgeParentCollection holds the string denoting the parentcollection edge name in mutations.
	EdgeParentCollection = "parentCollection"
	// Table holds the table name of the framespec in the database.
	Table = "frame_specs"
	// ParentCollectionTable is the table that holds the parentCollection relation/edge.
	ParentCollectionTable = "frame_specs"
	// ParentCollectionInverseTable is the table name for the CollectSpec entity.
	// It exists in this package in order to avoid circular dependency with the "collectspec" package.
	ParentCollectionInverseTable = "collect_specs"
	// ParentCollectionColumn is the table column denoting the parentCollection relation/edge.
	ParentCollectionColumn = "parent"
)

// Columns holds all SQL columns for framespec fields.
var Columns = []string{
	FieldID,
	FieldFrame,
	FieldParent,
	FieldCollectExpressions,
	FieldFlightRecorderEvents,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the FrameSpec queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByFrame orders the results by the frame field.
func ByFrame(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFrame, opts...).ToFunc()
}

// ByParent orders the results by the parent field.
func ByParent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldParent, opts...).ToFunc()
}

// ByParentCollectionField orders the results by parentCollection field.
func ByParentCollectionField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newParentCollectionStep(), sql.OrderByField(field, opts...))
	}
}
func newParentCollectionStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ParentCollectionInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ParentCollectionTable, ParentCollectionColumn),
	)
}
