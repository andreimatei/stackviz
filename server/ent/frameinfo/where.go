// Code generated by ent, DO NOT EDIT.

package frameinfo

import (
	"stacksviz/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldLTE(FieldID, id))
}

// Frame applies equality check predicate on the "frame" field. It's identical to FrameEQ.
func Frame(v string) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldEQ(FieldFrame, v))
}

// FrameEQ applies the EQ predicate on the "frame" field.
func FrameEQ(v string) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldEQ(FieldFrame, v))
}

// FrameNEQ applies the NEQ predicate on the "frame" field.
func FrameNEQ(v string) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldNEQ(FieldFrame, v))
}

// FrameIn applies the In predicate on the "frame" field.
func FrameIn(vs ...string) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldIn(FieldFrame, vs...))
}

// FrameNotIn applies the NotIn predicate on the "frame" field.
func FrameNotIn(vs ...string) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldNotIn(FieldFrame, vs...))
}

// FrameGT applies the GT predicate on the "frame" field.
func FrameGT(v string) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldGT(FieldFrame, v))
}

// FrameGTE applies the GTE predicate on the "frame" field.
func FrameGTE(v string) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldGTE(FieldFrame, v))
}

// FrameLT applies the LT predicate on the "frame" field.
func FrameLT(v string) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldLT(FieldFrame, v))
}

// FrameLTE applies the LTE predicate on the "frame" field.
func FrameLTE(v string) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldLTE(FieldFrame, v))
}

// FrameContains applies the Contains predicate on the "frame" field.
func FrameContains(v string) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldContains(FieldFrame, v))
}

// FrameHasPrefix applies the HasPrefix predicate on the "frame" field.
func FrameHasPrefix(v string) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldHasPrefix(FieldFrame, v))
}

// FrameHasSuffix applies the HasSuffix predicate on the "frame" field.
func FrameHasSuffix(v string) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldHasSuffix(FieldFrame, v))
}

// FrameEqualFold applies the EqualFold predicate on the "frame" field.
func FrameEqualFold(v string) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldEqualFold(FieldFrame, v))
}

// FrameContainsFold applies the ContainsFold predicate on the "frame" field.
func FrameContainsFold(v string) predicate.FrameInfo {
	return predicate.FrameInfo(sql.FieldContainsFold(FieldFrame, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FrameInfo) predicate.FrameInfo {
	return predicate.FrameInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FrameInfo) predicate.FrameInfo {
	return predicate.FrameInfo(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FrameInfo) predicate.FrameInfo {
	return predicate.FrameInfo(func(s *sql.Selector) {
		p(s.Not())
	})
}
