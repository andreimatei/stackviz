// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stacksviz/ent/frameinfo"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FrameInfoCreate is the builder for creating a FrameInfo entity.
type FrameInfoCreate struct {
	config
	mutation *FrameInfoMutation
	hooks    []Hook
}

// SetFrame sets the "frame" field.
func (fic *FrameInfoCreate) SetFrame(s string) *FrameInfoCreate {
	fic.mutation.SetFrame(s)
	return fic
}

// SetExprs sets the "exprs" field.
func (fic *FrameInfoCreate) SetExprs(s []string) *FrameInfoCreate {
	fic.mutation.SetExprs(s)
	return fic
}

// Mutation returns the FrameInfoMutation object of the builder.
func (fic *FrameInfoCreate) Mutation() *FrameInfoMutation {
	return fic.mutation
}

// Save creates the FrameInfo in the database.
func (fic *FrameInfoCreate) Save(ctx context.Context) (*FrameInfo, error) {
	return withHooks(ctx, fic.sqlSave, fic.mutation, fic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fic *FrameInfoCreate) SaveX(ctx context.Context) *FrameInfo {
	v, err := fic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fic *FrameInfoCreate) Exec(ctx context.Context) error {
	_, err := fic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fic *FrameInfoCreate) ExecX(ctx context.Context) {
	if err := fic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fic *FrameInfoCreate) check() error {
	if _, ok := fic.mutation.Frame(); !ok {
		return &ValidationError{Name: "frame", err: errors.New(`ent: missing required field "FrameInfo.frame"`)}
	}
	if _, ok := fic.mutation.Exprs(); !ok {
		return &ValidationError{Name: "exprs", err: errors.New(`ent: missing required field "FrameInfo.exprs"`)}
	}
	return nil
}

func (fic *FrameInfoCreate) sqlSave(ctx context.Context) (*FrameInfo, error) {
	if err := fic.check(); err != nil {
		return nil, err
	}
	_node, _spec := fic.createSpec()
	if err := sqlgraph.CreateNode(ctx, fic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	fic.mutation.id = &_node.ID
	fic.mutation.done = true
	return _node, nil
}

func (fic *FrameInfoCreate) createSpec() (*FrameInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &FrameInfo{config: fic.config}
		_spec = sqlgraph.NewCreateSpec(frameinfo.Table, sqlgraph.NewFieldSpec(frameinfo.FieldID, field.TypeInt))
	)
	if value, ok := fic.mutation.Frame(); ok {
		_spec.SetField(frameinfo.FieldFrame, field.TypeString, value)
		_node.Frame = value
	}
	if value, ok := fic.mutation.Exprs(); ok {
		_spec.SetField(frameinfo.FieldExprs, field.TypeJSON, value)
		_node.Exprs = value
	}
	return _node, _spec
}

// FrameInfoCreateBulk is the builder for creating many FrameInfo entities in bulk.
type FrameInfoCreateBulk struct {
	config
	builders []*FrameInfoCreate
}

// Save creates the FrameInfo entities in the database.
func (ficb *FrameInfoCreateBulk) Save(ctx context.Context) ([]*FrameInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ficb.builders))
	nodes := make([]*FrameInfo, len(ficb.builders))
	mutators := make([]Mutator, len(ficb.builders))
	for i := range ficb.builders {
		func(i int, root context.Context) {
			builder := ficb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FrameInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ficb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ficb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ficb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ficb *FrameInfoCreateBulk) SaveX(ctx context.Context) []*FrameInfo {
	v, err := ficb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ficb *FrameInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := ficb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ficb *FrameInfoCreateBulk) ExecX(ctx context.Context) {
	if err := ficb.Exec(ctx); err != nil {
		panic(err)
	}
}
