package server

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"stacksviz/ent"
	"stacksviz/ent/collection"
	"time"
)

// CreateCollection is the resolver for the createCollection field.
func (r *mutationResolver) CreateCollection(ctx context.Context, input *ent.CreateCollectionInput) (*ent.Collection, error) {
	return r.dbClient.Collection.Create().SetInput(*input).Save(ctx)
}

// CollectCollection is the resolver for the collectCollection field.
func (r *mutationResolver) CollectCollection(ctx context.Context) (*ent.Collection, error) {
	i := 0
	psIDs := make([]int, 0, len(r.conf.Targets))

	// Read the name of the first (and only) service.
	if len(r.conf.Targets) != 1 {
		return nil, fmt.Errorf("expected exactly one service")
	}

	var svcName string
	for serviceName, _ := range r.conf.Targets {
		// TODO(andrei): deal with multiple services
		svcName = serviceName
	}

	for processName, url := range r.conf.Targets[svcName] {
		i++
		log.Printf("collecting snapshot from process %d: %s-%s - %s", i, svcName, processName, url)
		// !!! snap, err := r.getSnapshotFromPprof(url)
		snap, err := r.getSnapshotFromDelveAgent(url)
		if err != nil {
			return nil, err
		}
		var framesOfInterest string
		if len(snap.Frames_of_interest) > 0 {
			b, err := json.Marshal(snap.Frames_of_interest)
			if err != nil {
				return nil, err
			}
			framesOfInterest = string(b)
		}

		log.Printf("!!! creating snapshot with frames of interest: %s", framesOfInterest)
		input := ent.CreateProcessSnapshotInput{
			ProcessID: processName,
			Snapshot:  snapToString(snap),
		}
		if framesOfInterest != "" {
			input.FramesOfInterest = &framesOfInterest
		}
		ps, err := r.dbClient.ProcessSnapshot.Create().SetInput(input).Save(ctx)
		if err != nil {
			return nil, err
		}
		psIDs = append(psIDs, ps.ID)
	}

	const timeFormat = "Monday, 02-Jan-06 15:04:05 MST"
	return r.dbClient.Collection.Create().SetInput(ent.CreateCollectionInput{
		Name:               fmt.Sprintf("%s - %s", svcName, time.Now().Format(timeFormat)),
		ProcessSnapshotIDs: psIDs,
	}).Save(ctx)
}

// CollectionByID is the resolver for the collectionByID field.
func (r *queryResolver) CollectionByID(ctx context.Context, id int) (*ent.Collection, error) {
	log.Printf("!!! querying collection by ID: %d", id)
	return r.dbClient.Debug().Collection.Query().Where(collection.ID(id)).Only(ctx)
}

// AvailableVars is the resolver for the availableVars field.
func (r *queryResolver) AvailableVars(ctx context.Context, funcArg string, pcOff int) ([]*VarInfo, error) {
	var svcName string
	for serviceName, _ := range r.conf.Targets {
		// TODO(andrei): deal with multiple services
		svcName = serviceName
	}

	var agentURL string
	for _, url := range r.conf.Targets[svcName] {
		agentURL = url
		break
	}

	log.Printf("!!! calling AvailableVars on Delve agent")
	vars, err := r.getAvailableVarsFromDelveAgent(agentURL, funcArg, int64(pcOff))
	if err != nil {
		return nil, err
	}
	res := make([]*VarInfo, len(vars))
	for i, v := range vars {
		res[i] = &VarInfo{
			Name:    v.Name,
			Type:    v.Type,
			VarType: v.VarType,
		}
	}
	return res, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
