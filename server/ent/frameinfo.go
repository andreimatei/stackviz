// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"stacksviz/ent/frameinfo"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FrameInfo is the model entity for the FrameInfo schema.
type FrameInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Frame holds the value of the "frame" field.
	Frame string `json:"frame,omitempty"`
	// Exprs holds the value of the "exprs" field.
	Exprs               []string `json:"exprs,omitempty"`
	collect_spec_frames *int
	selectValues        sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FrameInfo) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case frameinfo.FieldExprs:
			values[i] = new([]byte)
		case frameinfo.FieldID:
			values[i] = new(sql.NullInt64)
		case frameinfo.FieldFrame:
			values[i] = new(sql.NullString)
		case frameinfo.ForeignKeys[0]: // collect_spec_frames
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FrameInfo fields.
func (fi *FrameInfo) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case frameinfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fi.ID = int(value.Int64)
		case frameinfo.FieldFrame:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field frame", values[i])
			} else if value.Valid {
				fi.Frame = value.String
			}
		case frameinfo.FieldExprs:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field exprs", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &fi.Exprs); err != nil {
					return fmt.Errorf("unmarshal field exprs: %w", err)
				}
			}
		case frameinfo.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field collect_spec_frames", value)
			} else if value.Valid {
				fi.collect_spec_frames = new(int)
				*fi.collect_spec_frames = int(value.Int64)
			}
		default:
			fi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FrameInfo.
// This includes values selected through modifiers, order, etc.
func (fi *FrameInfo) Value(name string) (ent.Value, error) {
	return fi.selectValues.Get(name)
}

// Update returns a builder for updating this FrameInfo.
// Note that you need to call FrameInfo.Unwrap() before calling this method if this FrameInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (fi *FrameInfo) Update() *FrameInfoUpdateOne {
	return NewFrameInfoClient(fi.config).UpdateOne(fi)
}

// Unwrap unwraps the FrameInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fi *FrameInfo) Unwrap() *FrameInfo {
	_tx, ok := fi.config.driver.(*txDriver)
	if !ok {
		panic("ent: FrameInfo is not a transactional entity")
	}
	fi.config.driver = _tx.drv
	return fi
}

// String implements the fmt.Stringer.
func (fi *FrameInfo) String() string {
	var builder strings.Builder
	builder.WriteString("FrameInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fi.ID))
	builder.WriteString("frame=")
	builder.WriteString(fi.Frame)
	builder.WriteString(", ")
	builder.WriteString("exprs=")
	builder.WriteString(fmt.Sprintf("%v", fi.Exprs))
	builder.WriteByte(')')
	return builder.String()
}

// FrameInfos is a parsable slice of FrameInfo.
type FrameInfos []*FrameInfo
