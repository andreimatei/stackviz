// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stacksviz/ent/frameinfo"
	"stacksviz/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// FrameInfoUpdate is the builder for updating FrameInfo entities.
type FrameInfoUpdate struct {
	config
	hooks    []Hook
	mutation *FrameInfoMutation
}

// Where appends a list predicates to the FrameInfoUpdate builder.
func (fiu *FrameInfoUpdate) Where(ps ...predicate.FrameInfo) *FrameInfoUpdate {
	fiu.mutation.Where(ps...)
	return fiu
}

// SetFrame sets the "frame" field.
func (fiu *FrameInfoUpdate) SetFrame(s string) *FrameInfoUpdate {
	fiu.mutation.SetFrame(s)
	return fiu
}

// SetExprs sets the "exprs" field.
func (fiu *FrameInfoUpdate) SetExprs(s []string) *FrameInfoUpdate {
	fiu.mutation.SetExprs(s)
	return fiu
}

// AppendExprs appends s to the "exprs" field.
func (fiu *FrameInfoUpdate) AppendExprs(s []string) *FrameInfoUpdate {
	fiu.mutation.AppendExprs(s)
	return fiu
}

// Mutation returns the FrameInfoMutation object of the builder.
func (fiu *FrameInfoUpdate) Mutation() *FrameInfoMutation {
	return fiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fiu *FrameInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fiu.sqlSave, fiu.mutation, fiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiu *FrameInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := fiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fiu *FrameInfoUpdate) Exec(ctx context.Context) error {
	_, err := fiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiu *FrameInfoUpdate) ExecX(ctx context.Context) {
	if err := fiu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fiu *FrameInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(frameinfo.Table, frameinfo.Columns, sqlgraph.NewFieldSpec(frameinfo.FieldID, field.TypeInt))
	if ps := fiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiu.mutation.Frame(); ok {
		_spec.SetField(frameinfo.FieldFrame, field.TypeString, value)
	}
	if value, ok := fiu.mutation.Exprs(); ok {
		_spec.SetField(frameinfo.FieldExprs, field.TypeJSON, value)
	}
	if value, ok := fiu.mutation.AppendedExprs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, frameinfo.FieldExprs, value)
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{frameinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fiu.mutation.done = true
	return n, nil
}

// FrameInfoUpdateOne is the builder for updating a single FrameInfo entity.
type FrameInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FrameInfoMutation
}

// SetFrame sets the "frame" field.
func (fiuo *FrameInfoUpdateOne) SetFrame(s string) *FrameInfoUpdateOne {
	fiuo.mutation.SetFrame(s)
	return fiuo
}

// SetExprs sets the "exprs" field.
func (fiuo *FrameInfoUpdateOne) SetExprs(s []string) *FrameInfoUpdateOne {
	fiuo.mutation.SetExprs(s)
	return fiuo
}

// AppendExprs appends s to the "exprs" field.
func (fiuo *FrameInfoUpdateOne) AppendExprs(s []string) *FrameInfoUpdateOne {
	fiuo.mutation.AppendExprs(s)
	return fiuo
}

// Mutation returns the FrameInfoMutation object of the builder.
func (fiuo *FrameInfoUpdateOne) Mutation() *FrameInfoMutation {
	return fiuo.mutation
}

// Where appends a list predicates to the FrameInfoUpdate builder.
func (fiuo *FrameInfoUpdateOne) Where(ps ...predicate.FrameInfo) *FrameInfoUpdateOne {
	fiuo.mutation.Where(ps...)
	return fiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fiuo *FrameInfoUpdateOne) Select(field string, fields ...string) *FrameInfoUpdateOne {
	fiuo.fields = append([]string{field}, fields...)
	return fiuo
}

// Save executes the query and returns the updated FrameInfo entity.
func (fiuo *FrameInfoUpdateOne) Save(ctx context.Context) (*FrameInfo, error) {
	return withHooks(ctx, fiuo.sqlSave, fiuo.mutation, fiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fiuo *FrameInfoUpdateOne) SaveX(ctx context.Context) *FrameInfo {
	node, err := fiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fiuo *FrameInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := fiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fiuo *FrameInfoUpdateOne) ExecX(ctx context.Context) {
	if err := fiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fiuo *FrameInfoUpdateOne) sqlSave(ctx context.Context) (_node *FrameInfo, err error) {
	_spec := sqlgraph.NewUpdateSpec(frameinfo.Table, frameinfo.Columns, sqlgraph.NewFieldSpec(frameinfo.FieldID, field.TypeInt))
	id, ok := fiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FrameInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, frameinfo.FieldID)
		for _, f := range fields {
			if !frameinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != frameinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fiuo.mutation.Frame(); ok {
		_spec.SetField(frameinfo.FieldFrame, field.TypeString, value)
	}
	if value, ok := fiuo.mutation.Exprs(); ok {
		_spec.SetField(frameinfo.FieldExprs, field.TypeJSON, value)
	}
	if value, ok := fiuo.mutation.AppendedExprs(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, frameinfo.FieldExprs, value)
		})
	}
	_node = &FrameInfo{config: fiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{frameinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fiuo.mutation.done = true
	return _node, nil
}
