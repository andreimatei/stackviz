type Mutation {
  # collect snapshots from all the nodes
  collectServiceSnapshots: Collection
  addExprToCollectSpec(frame: String!, expr: String!): CollectSpec!
  removeExprFromCollectSpec(expr: String!, frame: String!): CollectSpec!
  addFlightRecorderEventToFrameSpec(collectSpecID: ID!, frame: String!, expr: String!, keyExpr: String!): FrameSpec!
  removeFlightRecorderEventFromCollectSpec(frame: String!, expr: String!, keyExpr: String!): CollectSpec!

  # No return value
  syncFlightRecorder(collectSpecID: ID!): Boolean
}

extend type Query {
  collectionByID(id: ID!): Collection
  goroutines(colID: Int!, snapID: Int!, gID: Int, filter: String): SnapshotInfo!
  availableVars(func: String!, pcOff: Int!): VarsAndTypes!
  # collectSpec returns the specification of what is being collected. If func is
  # specified, only the expressions for the respective function are returned.
  collectSpec: CollectSpec!
  typeInfo(name: String!): TypeInfo!
  getTree(colID: Int!, snapID: Int!, gID: Int, filter: String): String!

  frameSpecsWhere(where: FrameSpecWhereInput): [FrameSpec!]!
}

type VarsAndTypes {
  Vars: [VarInfo!]!
  Types: [TypeInfo!]!
}

type VarInfo {
  Name: String!
  Type: String!
  FormalParameter: Boolean!
  LoclistAvailable: Boolean!
}

type TypeInfo {
  Name: String!
  Fields: [FieldInfo!]
  FieldsNotLoaded: Boolean!
}

type FieldInfo {
  Name: String!
  Type: String!
  Embedded: Boolean!
}

type GoroutineInfo {
  ID: Int!
  Frames: [FrameInfo!]!
  Vars: [CollectedVar!]!
}

type GoroutinesGroup {
  IDs: [Int!]!
  Frames: [FrameInfo!]!
  # All the vars collected for all the goroutines in the group.
  # TODO(andrei): group by goroutine
  Vars: [CollectedVar!]!
}

type SnapshotInfo {
  Raw: [GoroutineInfo!]!
  Aggregated: [GoroutinesGroup!]!
  FlightRecorderData: Map
}

type FrameInfo {
  Func: String!
  File: String!
  Line: Int!
}

type CollectedVar {
  Expr: String!
  Value: String!
  Links: [Link!]!
}

type Link {
  SnapshotID: Int!
  GoroutineID: Int!
  FrameIdx: Int!
}
