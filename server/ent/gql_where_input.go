// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"stacksviz/ent/collection"
	"stacksviz/ent/collectspec"
	"stacksviz/ent/framespec"
	"stacksviz/ent/predicate"
	"stacksviz/ent/processsnapshot"
)

// CollectSpecWhereInput represents a where input for filtering CollectSpec queries.
type CollectSpecWhereInput struct {
	Predicates []predicate.CollectSpec  `json:"-"`
	Not        *CollectSpecWhereInput   `json:"not,omitempty"`
	Or         []*CollectSpecWhereInput `json:"or,omitempty"`
	And        []*CollectSpecWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "frames" edge predicates.
	HasFrames     *bool                  `json:"hasFrames,omitempty"`
	HasFramesWith []*FrameSpecWhereInput `json:"hasFramesWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CollectSpecWhereInput) AddPredicates(predicates ...predicate.CollectSpec) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CollectSpecWhereInput filter on the CollectSpecQuery builder.
func (i *CollectSpecWhereInput) Filter(q *CollectSpecQuery) (*CollectSpecQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCollectSpecWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCollectSpecWhereInput is returned in case the CollectSpecWhereInput is empty.
var ErrEmptyCollectSpecWhereInput = errors.New("ent: empty predicate CollectSpecWhereInput")

// P returns a predicate for filtering collectspecs.
// An error is returned if the input is empty or invalid.
func (i *CollectSpecWhereInput) P() (predicate.CollectSpec, error) {
	var predicates []predicate.CollectSpec
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, collectspec.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.CollectSpec, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, collectspec.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.CollectSpec, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, collectspec.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, collectspec.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, collectspec.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, collectspec.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, collectspec.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, collectspec.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, collectspec.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, collectspec.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, collectspec.IDLTE(*i.IDLTE))
	}

	if i.HasFrames != nil {
		p := collectspec.HasFrames()
		if !*i.HasFrames {
			p = collectspec.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasFramesWith) > 0 {
		with := make([]predicate.FrameSpec, 0, len(i.HasFramesWith))
		for _, w := range i.HasFramesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasFramesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, collectspec.HasFramesWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCollectSpecWhereInput
	case 1:
		return predicates[0], nil
	default:
		return collectspec.And(predicates...), nil
	}
}

// CollectionWhereInput represents a where input for filtering Collection queries.
type CollectionWhereInput struct {
	Predicates []predicate.Collection  `json:"-"`
	Not        *CollectionWhereInput   `json:"not,omitempty"`
	Or         []*CollectionWhereInput `json:"or,omitempty"`
	And        []*CollectionWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "collect_spec" field predicates.
	CollectSpec      *int  `json:"collectSpec,omitempty"`
	CollectSpecNEQ   *int  `json:"collectSpecNEQ,omitempty"`
	CollectSpecIn    []int `json:"collectSpecIn,omitempty"`
	CollectSpecNotIn []int `json:"collectSpecNotIn,omitempty"`
	CollectSpecGT    *int  `json:"collectSpecGT,omitempty"`
	CollectSpecGTE   *int  `json:"collectSpecGTE,omitempty"`
	CollectSpecLT    *int  `json:"collectSpecLT,omitempty"`
	CollectSpecLTE   *int  `json:"collectSpecLTE,omitempty"`

	// "process_snapshots" edge predicates.
	HasProcessSnapshots     *bool                        `json:"hasProcessSnapshots,omitempty"`
	HasProcessSnapshotsWith []*ProcessSnapshotWhereInput `json:"hasProcessSnapshotsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *CollectionWhereInput) AddPredicates(predicates ...predicate.Collection) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the CollectionWhereInput filter on the CollectionQuery builder.
func (i *CollectionWhereInput) Filter(q *CollectionQuery) (*CollectionQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyCollectionWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyCollectionWhereInput is returned in case the CollectionWhereInput is empty.
var ErrEmptyCollectionWhereInput = errors.New("ent: empty predicate CollectionWhereInput")

// P returns a predicate for filtering collections.
// An error is returned if the input is empty or invalid.
func (i *CollectionWhereInput) P() (predicate.Collection, error) {
	var predicates []predicate.Collection
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, collection.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Collection, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, collection.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Collection, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, collection.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, collection.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, collection.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, collection.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, collection.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, collection.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, collection.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, collection.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, collection.IDLTE(*i.IDLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, collection.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, collection.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, collection.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, collection.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, collection.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, collection.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, collection.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, collection.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, collection.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, collection.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, collection.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, collection.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, collection.NameContainsFold(*i.NameContainsFold))
	}
	if i.CollectSpec != nil {
		predicates = append(predicates, collection.CollectSpecEQ(*i.CollectSpec))
	}
	if i.CollectSpecNEQ != nil {
		predicates = append(predicates, collection.CollectSpecNEQ(*i.CollectSpecNEQ))
	}
	if len(i.CollectSpecIn) > 0 {
		predicates = append(predicates, collection.CollectSpecIn(i.CollectSpecIn...))
	}
	if len(i.CollectSpecNotIn) > 0 {
		predicates = append(predicates, collection.CollectSpecNotIn(i.CollectSpecNotIn...))
	}
	if i.CollectSpecGT != nil {
		predicates = append(predicates, collection.CollectSpecGT(*i.CollectSpecGT))
	}
	if i.CollectSpecGTE != nil {
		predicates = append(predicates, collection.CollectSpecGTE(*i.CollectSpecGTE))
	}
	if i.CollectSpecLT != nil {
		predicates = append(predicates, collection.CollectSpecLT(*i.CollectSpecLT))
	}
	if i.CollectSpecLTE != nil {
		predicates = append(predicates, collection.CollectSpecLTE(*i.CollectSpecLTE))
	}

	if i.HasProcessSnapshots != nil {
		p := collection.HasProcessSnapshots()
		if !*i.HasProcessSnapshots {
			p = collection.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasProcessSnapshotsWith) > 0 {
		with := make([]predicate.ProcessSnapshot, 0, len(i.HasProcessSnapshotsWith))
		for _, w := range i.HasProcessSnapshotsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasProcessSnapshotsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, collection.HasProcessSnapshotsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyCollectionWhereInput
	case 1:
		return predicates[0], nil
	default:
		return collection.And(predicates...), nil
	}
}

// FrameSpecWhereInput represents a where input for filtering FrameSpec queries.
type FrameSpecWhereInput struct {
	Predicates []predicate.FrameSpec  `json:"-"`
	Not        *FrameSpecWhereInput   `json:"not,omitempty"`
	Or         []*FrameSpecWhereInput `json:"or,omitempty"`
	And        []*FrameSpecWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "frame" field predicates.
	Frame             *string  `json:"frame,omitempty"`
	FrameNEQ          *string  `json:"frameNEQ,omitempty"`
	FrameIn           []string `json:"frameIn,omitempty"`
	FrameNotIn        []string `json:"frameNotIn,omitempty"`
	FrameGT           *string  `json:"frameGT,omitempty"`
	FrameGTE          *string  `json:"frameGTE,omitempty"`
	FrameLT           *string  `json:"frameLT,omitempty"`
	FrameLTE          *string  `json:"frameLTE,omitempty"`
	FrameContains     *string  `json:"frameContains,omitempty"`
	FrameHasPrefix    *string  `json:"frameHasPrefix,omitempty"`
	FrameHasSuffix    *string  `json:"frameHasSuffix,omitempty"`
	FrameEqualFold    *string  `json:"frameEqualFold,omitempty"`
	FrameContainsFold *string  `json:"frameContainsFold,omitempty"`

	// "parent" field predicates.
	Parent      *int  `json:"parent,omitempty"`
	ParentNEQ   *int  `json:"parentNEQ,omitempty"`
	ParentIn    []int `json:"parentIn,omitempty"`
	ParentNotIn []int `json:"parentNotIn,omitempty"`

	// "parentCollection" edge predicates.
	HasParentCollection     *bool                    `json:"hasParentCollection,omitempty"`
	HasParentCollectionWith []*CollectSpecWhereInput `json:"hasParentCollectionWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *FrameSpecWhereInput) AddPredicates(predicates ...predicate.FrameSpec) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the FrameSpecWhereInput filter on the FrameSpecQuery builder.
func (i *FrameSpecWhereInput) Filter(q *FrameSpecQuery) (*FrameSpecQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyFrameSpecWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyFrameSpecWhereInput is returned in case the FrameSpecWhereInput is empty.
var ErrEmptyFrameSpecWhereInput = errors.New("ent: empty predicate FrameSpecWhereInput")

// P returns a predicate for filtering framespecs.
// An error is returned if the input is empty or invalid.
func (i *FrameSpecWhereInput) P() (predicate.FrameSpec, error) {
	var predicates []predicate.FrameSpec
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, framespec.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.FrameSpec, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, framespec.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.FrameSpec, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, framespec.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, framespec.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, framespec.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, framespec.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, framespec.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, framespec.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, framespec.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, framespec.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, framespec.IDLTE(*i.IDLTE))
	}
	if i.Frame != nil {
		predicates = append(predicates, framespec.FrameEQ(*i.Frame))
	}
	if i.FrameNEQ != nil {
		predicates = append(predicates, framespec.FrameNEQ(*i.FrameNEQ))
	}
	if len(i.FrameIn) > 0 {
		predicates = append(predicates, framespec.FrameIn(i.FrameIn...))
	}
	if len(i.FrameNotIn) > 0 {
		predicates = append(predicates, framespec.FrameNotIn(i.FrameNotIn...))
	}
	if i.FrameGT != nil {
		predicates = append(predicates, framespec.FrameGT(*i.FrameGT))
	}
	if i.FrameGTE != nil {
		predicates = append(predicates, framespec.FrameGTE(*i.FrameGTE))
	}
	if i.FrameLT != nil {
		predicates = append(predicates, framespec.FrameLT(*i.FrameLT))
	}
	if i.FrameLTE != nil {
		predicates = append(predicates, framespec.FrameLTE(*i.FrameLTE))
	}
	if i.FrameContains != nil {
		predicates = append(predicates, framespec.FrameContains(*i.FrameContains))
	}
	if i.FrameHasPrefix != nil {
		predicates = append(predicates, framespec.FrameHasPrefix(*i.FrameHasPrefix))
	}
	if i.FrameHasSuffix != nil {
		predicates = append(predicates, framespec.FrameHasSuffix(*i.FrameHasSuffix))
	}
	if i.FrameEqualFold != nil {
		predicates = append(predicates, framespec.FrameEqualFold(*i.FrameEqualFold))
	}
	if i.FrameContainsFold != nil {
		predicates = append(predicates, framespec.FrameContainsFold(*i.FrameContainsFold))
	}
	if i.Parent != nil {
		predicates = append(predicates, framespec.ParentEQ(*i.Parent))
	}
	if i.ParentNEQ != nil {
		predicates = append(predicates, framespec.ParentNEQ(*i.ParentNEQ))
	}
	if len(i.ParentIn) > 0 {
		predicates = append(predicates, framespec.ParentIn(i.ParentIn...))
	}
	if len(i.ParentNotIn) > 0 {
		predicates = append(predicates, framespec.ParentNotIn(i.ParentNotIn...))
	}

	if i.HasParentCollection != nil {
		p := framespec.HasParentCollection()
		if !*i.HasParentCollection {
			p = framespec.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasParentCollectionWith) > 0 {
		with := make([]predicate.CollectSpec, 0, len(i.HasParentCollectionWith))
		for _, w := range i.HasParentCollectionWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasParentCollectionWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, framespec.HasParentCollectionWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyFrameSpecWhereInput
	case 1:
		return predicates[0], nil
	default:
		return framespec.And(predicates...), nil
	}
}

// ProcessSnapshotWhereInput represents a where input for filtering ProcessSnapshot queries.
type ProcessSnapshotWhereInput struct {
	Predicates []predicate.ProcessSnapshot  `json:"-"`
	Not        *ProcessSnapshotWhereInput   `json:"not,omitempty"`
	Or         []*ProcessSnapshotWhereInput `json:"or,omitempty"`
	And        []*ProcessSnapshotWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "process_id" field predicates.
	ProcessID             *string  `json:"processID,omitempty"`
	ProcessIDNEQ          *string  `json:"processIDNEQ,omitempty"`
	ProcessIDIn           []string `json:"processIDIn,omitempty"`
	ProcessIDNotIn        []string `json:"processIDNotIn,omitempty"`
	ProcessIDGT           *string  `json:"processIDGT,omitempty"`
	ProcessIDGTE          *string  `json:"processIDGTE,omitempty"`
	ProcessIDLT           *string  `json:"processIDLT,omitempty"`
	ProcessIDLTE          *string  `json:"processIDLTE,omitempty"`
	ProcessIDContains     *string  `json:"processIDContains,omitempty"`
	ProcessIDHasPrefix    *string  `json:"processIDHasPrefix,omitempty"`
	ProcessIDHasSuffix    *string  `json:"processIDHasSuffix,omitempty"`
	ProcessIDEqualFold    *string  `json:"processIDEqualFold,omitempty"`
	ProcessIDContainsFold *string  `json:"processIDContainsFold,omitempty"`

	// "snapshot" field predicates.
	Snapshot             *string  `json:"snapshot,omitempty"`
	SnapshotNEQ          *string  `json:"snapshotNEQ,omitempty"`
	SnapshotIn           []string `json:"snapshotIn,omitempty"`
	SnapshotNotIn        []string `json:"snapshotNotIn,omitempty"`
	SnapshotGT           *string  `json:"snapshotGT,omitempty"`
	SnapshotGTE          *string  `json:"snapshotGTE,omitempty"`
	SnapshotLT           *string  `json:"snapshotLT,omitempty"`
	SnapshotLTE          *string  `json:"snapshotLTE,omitempty"`
	SnapshotContains     *string  `json:"snapshotContains,omitempty"`
	SnapshotHasPrefix    *string  `json:"snapshotHasPrefix,omitempty"`
	SnapshotHasSuffix    *string  `json:"snapshotHasSuffix,omitempty"`
	SnapshotEqualFold    *string  `json:"snapshotEqualFold,omitempty"`
	SnapshotContainsFold *string  `json:"snapshotContainsFold,omitempty"`

	// "frames_of_interest" field predicates.
	FramesOfInterest             *string  `json:"framesOfInterest,omitempty"`
	FramesOfInterestNEQ          *string  `json:"framesOfInterestNEQ,omitempty"`
	FramesOfInterestIn           []string `json:"framesOfInterestIn,omitempty"`
	FramesOfInterestNotIn        []string `json:"framesOfInterestNotIn,omitempty"`
	FramesOfInterestGT           *string  `json:"framesOfInterestGT,omitempty"`
	FramesOfInterestGTE          *string  `json:"framesOfInterestGTE,omitempty"`
	FramesOfInterestLT           *string  `json:"framesOfInterestLT,omitempty"`
	FramesOfInterestLTE          *string  `json:"framesOfInterestLTE,omitempty"`
	FramesOfInterestContains     *string  `json:"framesOfInterestContains,omitempty"`
	FramesOfInterestHasPrefix    *string  `json:"framesOfInterestHasPrefix,omitempty"`
	FramesOfInterestHasSuffix    *string  `json:"framesOfInterestHasSuffix,omitempty"`
	FramesOfInterestIsNil        bool     `json:"framesOfInterestIsNil,omitempty"`
	FramesOfInterestNotNil       bool     `json:"framesOfInterestNotNil,omitempty"`
	FramesOfInterestEqualFold    *string  `json:"framesOfInterestEqualFold,omitempty"`
	FramesOfInterestContainsFold *string  `json:"framesOfInterestContainsFold,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ProcessSnapshotWhereInput) AddPredicates(predicates ...predicate.ProcessSnapshot) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ProcessSnapshotWhereInput filter on the ProcessSnapshotQuery builder.
func (i *ProcessSnapshotWhereInput) Filter(q *ProcessSnapshotQuery) (*ProcessSnapshotQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyProcessSnapshotWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyProcessSnapshotWhereInput is returned in case the ProcessSnapshotWhereInput is empty.
var ErrEmptyProcessSnapshotWhereInput = errors.New("ent: empty predicate ProcessSnapshotWhereInput")

// P returns a predicate for filtering processsnapshots.
// An error is returned if the input is empty or invalid.
func (i *ProcessSnapshotWhereInput) P() (predicate.ProcessSnapshot, error) {
	var predicates []predicate.ProcessSnapshot
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, processsnapshot.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.ProcessSnapshot, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, processsnapshot.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.ProcessSnapshot, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, processsnapshot.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, processsnapshot.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, processsnapshot.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, processsnapshot.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, processsnapshot.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, processsnapshot.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, processsnapshot.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, processsnapshot.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, processsnapshot.IDLTE(*i.IDLTE))
	}
	if i.ProcessID != nil {
		predicates = append(predicates, processsnapshot.ProcessIDEQ(*i.ProcessID))
	}
	if i.ProcessIDNEQ != nil {
		predicates = append(predicates, processsnapshot.ProcessIDNEQ(*i.ProcessIDNEQ))
	}
	if len(i.ProcessIDIn) > 0 {
		predicates = append(predicates, processsnapshot.ProcessIDIn(i.ProcessIDIn...))
	}
	if len(i.ProcessIDNotIn) > 0 {
		predicates = append(predicates, processsnapshot.ProcessIDNotIn(i.ProcessIDNotIn...))
	}
	if i.ProcessIDGT != nil {
		predicates = append(predicates, processsnapshot.ProcessIDGT(*i.ProcessIDGT))
	}
	if i.ProcessIDGTE != nil {
		predicates = append(predicates, processsnapshot.ProcessIDGTE(*i.ProcessIDGTE))
	}
	if i.ProcessIDLT != nil {
		predicates = append(predicates, processsnapshot.ProcessIDLT(*i.ProcessIDLT))
	}
	if i.ProcessIDLTE != nil {
		predicates = append(predicates, processsnapshot.ProcessIDLTE(*i.ProcessIDLTE))
	}
	if i.ProcessIDContains != nil {
		predicates = append(predicates, processsnapshot.ProcessIDContains(*i.ProcessIDContains))
	}
	if i.ProcessIDHasPrefix != nil {
		predicates = append(predicates, processsnapshot.ProcessIDHasPrefix(*i.ProcessIDHasPrefix))
	}
	if i.ProcessIDHasSuffix != nil {
		predicates = append(predicates, processsnapshot.ProcessIDHasSuffix(*i.ProcessIDHasSuffix))
	}
	if i.ProcessIDEqualFold != nil {
		predicates = append(predicates, processsnapshot.ProcessIDEqualFold(*i.ProcessIDEqualFold))
	}
	if i.ProcessIDContainsFold != nil {
		predicates = append(predicates, processsnapshot.ProcessIDContainsFold(*i.ProcessIDContainsFold))
	}
	if i.Snapshot != nil {
		predicates = append(predicates, processsnapshot.SnapshotEQ(*i.Snapshot))
	}
	if i.SnapshotNEQ != nil {
		predicates = append(predicates, processsnapshot.SnapshotNEQ(*i.SnapshotNEQ))
	}
	if len(i.SnapshotIn) > 0 {
		predicates = append(predicates, processsnapshot.SnapshotIn(i.SnapshotIn...))
	}
	if len(i.SnapshotNotIn) > 0 {
		predicates = append(predicates, processsnapshot.SnapshotNotIn(i.SnapshotNotIn...))
	}
	if i.SnapshotGT != nil {
		predicates = append(predicates, processsnapshot.SnapshotGT(*i.SnapshotGT))
	}
	if i.SnapshotGTE != nil {
		predicates = append(predicates, processsnapshot.SnapshotGTE(*i.SnapshotGTE))
	}
	if i.SnapshotLT != nil {
		predicates = append(predicates, processsnapshot.SnapshotLT(*i.SnapshotLT))
	}
	if i.SnapshotLTE != nil {
		predicates = append(predicates, processsnapshot.SnapshotLTE(*i.SnapshotLTE))
	}
	if i.SnapshotContains != nil {
		predicates = append(predicates, processsnapshot.SnapshotContains(*i.SnapshotContains))
	}
	if i.SnapshotHasPrefix != nil {
		predicates = append(predicates, processsnapshot.SnapshotHasPrefix(*i.SnapshotHasPrefix))
	}
	if i.SnapshotHasSuffix != nil {
		predicates = append(predicates, processsnapshot.SnapshotHasSuffix(*i.SnapshotHasSuffix))
	}
	if i.SnapshotEqualFold != nil {
		predicates = append(predicates, processsnapshot.SnapshotEqualFold(*i.SnapshotEqualFold))
	}
	if i.SnapshotContainsFold != nil {
		predicates = append(predicates, processsnapshot.SnapshotContainsFold(*i.SnapshotContainsFold))
	}
	if i.FramesOfInterest != nil {
		predicates = append(predicates, processsnapshot.FramesOfInterestEQ(*i.FramesOfInterest))
	}
	if i.FramesOfInterestNEQ != nil {
		predicates = append(predicates, processsnapshot.FramesOfInterestNEQ(*i.FramesOfInterestNEQ))
	}
	if len(i.FramesOfInterestIn) > 0 {
		predicates = append(predicates, processsnapshot.FramesOfInterestIn(i.FramesOfInterestIn...))
	}
	if len(i.FramesOfInterestNotIn) > 0 {
		predicates = append(predicates, processsnapshot.FramesOfInterestNotIn(i.FramesOfInterestNotIn...))
	}
	if i.FramesOfInterestGT != nil {
		predicates = append(predicates, processsnapshot.FramesOfInterestGT(*i.FramesOfInterestGT))
	}
	if i.FramesOfInterestGTE != nil {
		predicates = append(predicates, processsnapshot.FramesOfInterestGTE(*i.FramesOfInterestGTE))
	}
	if i.FramesOfInterestLT != nil {
		predicates = append(predicates, processsnapshot.FramesOfInterestLT(*i.FramesOfInterestLT))
	}
	if i.FramesOfInterestLTE != nil {
		predicates = append(predicates, processsnapshot.FramesOfInterestLTE(*i.FramesOfInterestLTE))
	}
	if i.FramesOfInterestContains != nil {
		predicates = append(predicates, processsnapshot.FramesOfInterestContains(*i.FramesOfInterestContains))
	}
	if i.FramesOfInterestHasPrefix != nil {
		predicates = append(predicates, processsnapshot.FramesOfInterestHasPrefix(*i.FramesOfInterestHasPrefix))
	}
	if i.FramesOfInterestHasSuffix != nil {
		predicates = append(predicates, processsnapshot.FramesOfInterestHasSuffix(*i.FramesOfInterestHasSuffix))
	}
	if i.FramesOfInterestIsNil {
		predicates = append(predicates, processsnapshot.FramesOfInterestIsNil())
	}
	if i.FramesOfInterestNotNil {
		predicates = append(predicates, processsnapshot.FramesOfInterestNotNil())
	}
	if i.FramesOfInterestEqualFold != nil {
		predicates = append(predicates, processsnapshot.FramesOfInterestEqualFold(*i.FramesOfInterestEqualFold))
	}
	if i.FramesOfInterestContainsFold != nil {
		predicates = append(predicates, processsnapshot.FramesOfInterestContainsFold(*i.FramesOfInterestContainsFold))
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyProcessSnapshotWhereInput
	case 1:
		return predicates[0], nil
	default:
		return processsnapshot.And(predicates...), nil
	}
}
