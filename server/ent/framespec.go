// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"stacksviz/ent/collectspec"
	"stacksviz/ent/framespec"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// FrameSpec is the model entity for the FrameSpec schema.
type FrameSpec struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Frame holds the value of the "frame" field.
	Frame string `json:"frame,omitempty"`
	// The parent collection spec
	CollectSpecID int `json:"collect_spec_id,omitempty"`
	// CollectExpressions holds the value of the "collect_expressions" field.
	CollectExpressions []string `json:"collect_expressions,omitempty"`
	// FlightRecorderEvents holds the value of the "flight_recorder_events" field.
	FlightRecorderEvents []string `json:"flight_recorder_events,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FrameSpecQuery when eager-loading is set.
	Edges        FrameSpecEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FrameSpecEdges holds the relations/edges for other nodes in the graph.
type FrameSpecEdges struct {
	// The parent collection spec
	ParentCollection *CollectSpec `json:"parentCollection,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// ParentCollectionOrErr returns the ParentCollection value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FrameSpecEdges) ParentCollectionOrErr() (*CollectSpec, error) {
	if e.loadedTypes[0] {
		if e.ParentCollection == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: collectspec.Label}
		}
		return e.ParentCollection, nil
	}
	return nil, &NotLoadedError{edge: "parentCollection"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FrameSpec) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case framespec.FieldCollectExpressions, framespec.FieldFlightRecorderEvents:
			values[i] = new([]byte)
		case framespec.FieldID, framespec.FieldCollectSpecID:
			values[i] = new(sql.NullInt64)
		case framespec.FieldFrame:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FrameSpec fields.
func (fs *FrameSpec) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case framespec.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fs.ID = int(value.Int64)
		case framespec.FieldFrame:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field frame", values[i])
			} else if value.Valid {
				fs.Frame = value.String
			}
		case framespec.FieldCollectSpecID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field collect_spec_id", values[i])
			} else if value.Valid {
				fs.CollectSpecID = int(value.Int64)
			}
		case framespec.FieldCollectExpressions:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field collect_expressions", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &fs.CollectExpressions); err != nil {
					return fmt.Errorf("unmarshal field collect_expressions: %w", err)
				}
			}
		case framespec.FieldFlightRecorderEvents:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field flight_recorder_events", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &fs.FlightRecorderEvents); err != nil {
					return fmt.Errorf("unmarshal field flight_recorder_events: %w", err)
				}
			}
		default:
			fs.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FrameSpec.
// This includes values selected through modifiers, order, etc.
func (fs *FrameSpec) Value(name string) (ent.Value, error) {
	return fs.selectValues.Get(name)
}

// QueryParentCollection queries the "parentCollection" edge of the FrameSpec entity.
func (fs *FrameSpec) QueryParentCollection() *CollectSpecQuery {
	return NewFrameSpecClient(fs.config).QueryParentCollection(fs)
}

// Update returns a builder for updating this FrameSpec.
// Note that you need to call FrameSpec.Unwrap() before calling this method if this FrameSpec
// was returned from a transaction, and the transaction was committed or rolled back.
func (fs *FrameSpec) Update() *FrameSpecUpdateOne {
	return NewFrameSpecClient(fs.config).UpdateOne(fs)
}

// Unwrap unwraps the FrameSpec entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fs *FrameSpec) Unwrap() *FrameSpec {
	_tx, ok := fs.config.driver.(*txDriver)
	if !ok {
		panic("ent: FrameSpec is not a transactional entity")
	}
	fs.config.driver = _tx.drv
	return fs
}

// String implements the fmt.Stringer.
func (fs *FrameSpec) String() string {
	var builder strings.Builder
	builder.WriteString("FrameSpec(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fs.ID))
	builder.WriteString("frame=")
	builder.WriteString(fs.Frame)
	builder.WriteString(", ")
	builder.WriteString("collect_spec_id=")
	builder.WriteString(fmt.Sprintf("%v", fs.CollectSpecID))
	builder.WriteString(", ")
	builder.WriteString("collect_expressions=")
	builder.WriteString(fmt.Sprintf("%v", fs.CollectExpressions))
	builder.WriteString(", ")
	builder.WriteString("flight_recorder_events=")
	builder.WriteString(fmt.Sprintf("%v", fs.FlightRecorderEvents))
	builder.WriteByte(')')
	return builder.String()
}

// FrameSpecs is a parsable slice of FrameSpec.
type FrameSpecs []*FrameSpec
