// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"stacksviz/ent/collection"
	"stacksviz/ent/collectspec"
	"stacksviz/ent/framespec"
	"stacksviz/ent/predicate"
	"stacksviz/ent/processsnapshot"
	"sync"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCollectSpec     = "CollectSpec"
	TypeCollection      = "Collection"
	TypeFrameSpec       = "FrameSpec"
	TypeProcessSnapshot = "ProcessSnapshot"
)

// CollectSpecMutation represents an operation that mutates the CollectSpec nodes in the graph.
type CollectSpecMutation struct {
	config
	op            Op
	typ           string
	id            *int
	clearedFields map[string]struct{}
	frames        map[int]struct{}
	removedframes map[int]struct{}
	clearedframes bool
	done          bool
	oldValue      func(context.Context) (*CollectSpec, error)
	predicates    []predicate.CollectSpec
}

var _ ent.Mutation = (*CollectSpecMutation)(nil)

// collectspecOption allows management of the mutation configuration using functional options.
type collectspecOption func(*CollectSpecMutation)

// newCollectSpecMutation creates new mutation for the CollectSpec entity.
func newCollectSpecMutation(c config, op Op, opts ...collectspecOption) *CollectSpecMutation {
	m := &CollectSpecMutation{
		config:        c,
		op:            op,
		typ:           TypeCollectSpec,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCollectSpecID sets the ID field of the mutation.
func withCollectSpecID(id int) collectspecOption {
	return func(m *CollectSpecMutation) {
		var (
			err   error
			once  sync.Once
			value *CollectSpec
		)
		m.oldValue = func(ctx context.Context) (*CollectSpec, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CollectSpec.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCollectSpec sets the old CollectSpec of the mutation.
func withCollectSpec(node *CollectSpec) collectspecOption {
	return func(m *CollectSpecMutation) {
		m.oldValue = func(context.Context) (*CollectSpec, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CollectSpecMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CollectSpecMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CollectSpecMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CollectSpecMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CollectSpec.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// AddFrameIDs adds the "frames" edge to the FrameSpec entity by ids.
func (m *CollectSpecMutation) AddFrameIDs(ids ...int) {
	if m.frames == nil {
		m.frames = make(map[int]struct{})
	}
	for i := range ids {
		m.frames[ids[i]] = struct{}{}
	}
}

// ClearFrames clears the "frames" edge to the FrameSpec entity.
func (m *CollectSpecMutation) ClearFrames() {
	m.clearedframes = true
}

// FramesCleared reports if the "frames" edge to the FrameSpec entity was cleared.
func (m *CollectSpecMutation) FramesCleared() bool {
	return m.clearedframes
}

// RemoveFrameIDs removes the "frames" edge to the FrameSpec entity by IDs.
func (m *CollectSpecMutation) RemoveFrameIDs(ids ...int) {
	if m.removedframes == nil {
		m.removedframes = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.frames, ids[i])
		m.removedframes[ids[i]] = struct{}{}
	}
}

// RemovedFrames returns the removed IDs of the "frames" edge to the FrameSpec entity.
func (m *CollectSpecMutation) RemovedFramesIDs() (ids []int) {
	for id := range m.removedframes {
		ids = append(ids, id)
	}
	return
}

// FramesIDs returns the "frames" edge IDs in the mutation.
func (m *CollectSpecMutation) FramesIDs() (ids []int) {
	for id := range m.frames {
		ids = append(ids, id)
	}
	return
}

// ResetFrames resets all changes to the "frames" edge.
func (m *CollectSpecMutation) ResetFrames() {
	m.frames = nil
	m.clearedframes = false
	m.removedframes = nil
}

// Where appends a list predicates to the CollectSpecMutation builder.
func (m *CollectSpecMutation) Where(ps ...predicate.CollectSpec) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CollectSpecMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CollectSpecMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CollectSpec, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CollectSpecMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CollectSpecMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CollectSpec).
func (m *CollectSpecMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CollectSpecMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CollectSpecMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CollectSpecMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown CollectSpec field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CollectSpecMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown CollectSpec field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CollectSpecMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CollectSpecMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CollectSpecMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown CollectSpec numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CollectSpecMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CollectSpecMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CollectSpecMutation) ClearField(name string) error {
	return fmt.Errorf("unknown CollectSpec nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CollectSpecMutation) ResetField(name string) error {
	return fmt.Errorf("unknown CollectSpec field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CollectSpecMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.frames != nil {
		edges = append(edges, collectspec.EdgeFrames)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CollectSpecMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case collectspec.EdgeFrames:
		ids := make([]ent.Value, 0, len(m.frames))
		for id := range m.frames {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CollectSpecMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedframes != nil {
		edges = append(edges, collectspec.EdgeFrames)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CollectSpecMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case collectspec.EdgeFrames:
		ids := make([]ent.Value, 0, len(m.removedframes))
		for id := range m.removedframes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CollectSpecMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedframes {
		edges = append(edges, collectspec.EdgeFrames)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CollectSpecMutation) EdgeCleared(name string) bool {
	switch name {
	case collectspec.EdgeFrames:
		return m.clearedframes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CollectSpecMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown CollectSpec unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CollectSpecMutation) ResetEdge(name string) error {
	switch name {
	case collectspec.EdgeFrames:
		m.ResetFrames()
		return nil
	}
	return fmt.Errorf("unknown CollectSpec edge %s", name)
}

// CollectionMutation represents an operation that mutates the Collection nodes in the graph.
type CollectionMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	name                     *string
	collect_spec             *int
	addcollect_spec          *int
	clearedFields            map[string]struct{}
	process_snapshots        map[int]struct{}
	removedprocess_snapshots map[int]struct{}
	clearedprocess_snapshots bool
	done                     bool
	oldValue                 func(context.Context) (*Collection, error)
	predicates               []predicate.Collection
}

var _ ent.Mutation = (*CollectionMutation)(nil)

// collectionOption allows management of the mutation configuration using functional options.
type collectionOption func(*CollectionMutation)

// newCollectionMutation creates new mutation for the Collection entity.
func newCollectionMutation(c config, op Op, opts ...collectionOption) *CollectionMutation {
	m := &CollectionMutation{
		config:        c,
		op:            op,
		typ:           TypeCollection,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCollectionID sets the ID field of the mutation.
func withCollectionID(id int) collectionOption {
	return func(m *CollectionMutation) {
		var (
			err   error
			once  sync.Once
			value *Collection
		)
		m.oldValue = func(ctx context.Context) (*Collection, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Collection.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCollection sets the old Collection of the mutation.
func withCollection(node *Collection) collectionOption {
	return func(m *CollectionMutation) {
		m.oldValue = func(context.Context) (*Collection, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CollectionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CollectionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CollectionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CollectionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Collection.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *CollectionMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *CollectionMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *CollectionMutation) ResetName() {
	m.name = nil
}

// SetCollectSpec sets the "collect_spec" field.
func (m *CollectionMutation) SetCollectSpec(i int) {
	m.collect_spec = &i
	m.addcollect_spec = nil
}

// CollectSpec returns the value of the "collect_spec" field in the mutation.
func (m *CollectionMutation) CollectSpec() (r int, exists bool) {
	v := m.collect_spec
	if v == nil {
		return
	}
	return *v, true
}

// OldCollectSpec returns the old "collect_spec" field's value of the Collection entity.
// If the Collection object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CollectionMutation) OldCollectSpec(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCollectSpec is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCollectSpec requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCollectSpec: %w", err)
	}
	return oldValue.CollectSpec, nil
}

// AddCollectSpec adds i to the "collect_spec" field.
func (m *CollectionMutation) AddCollectSpec(i int) {
	if m.addcollect_spec != nil {
		*m.addcollect_spec += i
	} else {
		m.addcollect_spec = &i
	}
}

// AddedCollectSpec returns the value that was added to the "collect_spec" field in this mutation.
func (m *CollectionMutation) AddedCollectSpec() (r int, exists bool) {
	v := m.addcollect_spec
	if v == nil {
		return
	}
	return *v, true
}

// ResetCollectSpec resets all changes to the "collect_spec" field.
func (m *CollectionMutation) ResetCollectSpec() {
	m.collect_spec = nil
	m.addcollect_spec = nil
}

// AddProcessSnapshotIDs adds the "process_snapshots" edge to the ProcessSnapshot entity by ids.
func (m *CollectionMutation) AddProcessSnapshotIDs(ids ...int) {
	if m.process_snapshots == nil {
		m.process_snapshots = make(map[int]struct{})
	}
	for i := range ids {
		m.process_snapshots[ids[i]] = struct{}{}
	}
}

// ClearProcessSnapshots clears the "process_snapshots" edge to the ProcessSnapshot entity.
func (m *CollectionMutation) ClearProcessSnapshots() {
	m.clearedprocess_snapshots = true
}

// ProcessSnapshotsCleared reports if the "process_snapshots" edge to the ProcessSnapshot entity was cleared.
func (m *CollectionMutation) ProcessSnapshotsCleared() bool {
	return m.clearedprocess_snapshots
}

// RemoveProcessSnapshotIDs removes the "process_snapshots" edge to the ProcessSnapshot entity by IDs.
func (m *CollectionMutation) RemoveProcessSnapshotIDs(ids ...int) {
	if m.removedprocess_snapshots == nil {
		m.removedprocess_snapshots = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.process_snapshots, ids[i])
		m.removedprocess_snapshots[ids[i]] = struct{}{}
	}
}

// RemovedProcessSnapshots returns the removed IDs of the "process_snapshots" edge to the ProcessSnapshot entity.
func (m *CollectionMutation) RemovedProcessSnapshotsIDs() (ids []int) {
	for id := range m.removedprocess_snapshots {
		ids = append(ids, id)
	}
	return
}

// ProcessSnapshotsIDs returns the "process_snapshots" edge IDs in the mutation.
func (m *CollectionMutation) ProcessSnapshotsIDs() (ids []int) {
	for id := range m.process_snapshots {
		ids = append(ids, id)
	}
	return
}

// ResetProcessSnapshots resets all changes to the "process_snapshots" edge.
func (m *CollectionMutation) ResetProcessSnapshots() {
	m.process_snapshots = nil
	m.clearedprocess_snapshots = false
	m.removedprocess_snapshots = nil
}

// Where appends a list predicates to the CollectionMutation builder.
func (m *CollectionMutation) Where(ps ...predicate.Collection) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CollectionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CollectionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Collection, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CollectionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CollectionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Collection).
func (m *CollectionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CollectionMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, collection.FieldName)
	}
	if m.collect_spec != nil {
		fields = append(fields, collection.FieldCollectSpec)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CollectionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case collection.FieldName:
		return m.Name()
	case collection.FieldCollectSpec:
		return m.CollectSpec()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CollectionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case collection.FieldName:
		return m.OldName(ctx)
	case collection.FieldCollectSpec:
		return m.OldCollectSpec(ctx)
	}
	return nil, fmt.Errorf("unknown Collection field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CollectionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case collection.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case collection.FieldCollectSpec:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCollectSpec(v)
		return nil
	}
	return fmt.Errorf("unknown Collection field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CollectionMutation) AddedFields() []string {
	var fields []string
	if m.addcollect_spec != nil {
		fields = append(fields, collection.FieldCollectSpec)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CollectionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case collection.FieldCollectSpec:
		return m.AddedCollectSpec()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CollectionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case collection.FieldCollectSpec:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCollectSpec(v)
		return nil
	}
	return fmt.Errorf("unknown Collection numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CollectionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CollectionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CollectionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Collection nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CollectionMutation) ResetField(name string) error {
	switch name {
	case collection.FieldName:
		m.ResetName()
		return nil
	case collection.FieldCollectSpec:
		m.ResetCollectSpec()
		return nil
	}
	return fmt.Errorf("unknown Collection field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CollectionMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.process_snapshots != nil {
		edges = append(edges, collection.EdgeProcessSnapshots)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CollectionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case collection.EdgeProcessSnapshots:
		ids := make([]ent.Value, 0, len(m.process_snapshots))
		for id := range m.process_snapshots {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CollectionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedprocess_snapshots != nil {
		edges = append(edges, collection.EdgeProcessSnapshots)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CollectionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case collection.EdgeProcessSnapshots:
		ids := make([]ent.Value, 0, len(m.removedprocess_snapshots))
		for id := range m.removedprocess_snapshots {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CollectionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedprocess_snapshots {
		edges = append(edges, collection.EdgeProcessSnapshots)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CollectionMutation) EdgeCleared(name string) bool {
	switch name {
	case collection.EdgeProcessSnapshots:
		return m.clearedprocess_snapshots
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CollectionMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Collection unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CollectionMutation) ResetEdge(name string) error {
	switch name {
	case collection.EdgeProcessSnapshots:
		m.ResetProcessSnapshots()
		return nil
	}
	return fmt.Errorf("unknown Collection edge %s", name)
}

// FrameSpecMutation represents an operation that mutates the FrameSpec nodes in the graph.
type FrameSpecMutation struct {
	config
	op                           Op
	typ                          string
	id                           *int
	frame                        *string
	collect_expressions          *[]string
	appendcollect_expressions    []string
	flight_recorder_events       *[]string
	appendflight_recorder_events []string
	clearedFields                map[string]struct{}
	parentCollection             *int
	clearedparentCollection      bool
	done                         bool
	oldValue                     func(context.Context) (*FrameSpec, error)
	predicates                   []predicate.FrameSpec
}

var _ ent.Mutation = (*FrameSpecMutation)(nil)

// framespecOption allows management of the mutation configuration using functional options.
type framespecOption func(*FrameSpecMutation)

// newFrameSpecMutation creates new mutation for the FrameSpec entity.
func newFrameSpecMutation(c config, op Op, opts ...framespecOption) *FrameSpecMutation {
	m := &FrameSpecMutation{
		config:        c,
		op:            op,
		typ:           TypeFrameSpec,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFrameSpecID sets the ID field of the mutation.
func withFrameSpecID(id int) framespecOption {
	return func(m *FrameSpecMutation) {
		var (
			err   error
			once  sync.Once
			value *FrameSpec
		)
		m.oldValue = func(ctx context.Context) (*FrameSpec, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FrameSpec.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFrameSpec sets the old FrameSpec of the mutation.
func withFrameSpec(node *FrameSpec) framespecOption {
	return func(m *FrameSpecMutation) {
		m.oldValue = func(context.Context) (*FrameSpec, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FrameSpecMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FrameSpecMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FrameSpecMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FrameSpecMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FrameSpec.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFrame sets the "frame" field.
func (m *FrameSpecMutation) SetFrame(s string) {
	m.frame = &s
}

// Frame returns the value of the "frame" field in the mutation.
func (m *FrameSpecMutation) Frame() (r string, exists bool) {
	v := m.frame
	if v == nil {
		return
	}
	return *v, true
}

// OldFrame returns the old "frame" field's value of the FrameSpec entity.
// If the FrameSpec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FrameSpecMutation) OldFrame(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFrame is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFrame requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFrame: %w", err)
	}
	return oldValue.Frame, nil
}

// ResetFrame resets all changes to the "frame" field.
func (m *FrameSpecMutation) ResetFrame() {
	m.frame = nil
}

// SetParent sets the "parent" field.
func (m *FrameSpecMutation) SetParent(i int) {
	m.parentCollection = &i
}

// Parent returns the value of the "parent" field in the mutation.
func (m *FrameSpecMutation) Parent() (r int, exists bool) {
	v := m.parentCollection
	if v == nil {
		return
	}
	return *v, true
}

// OldParent returns the old "parent" field's value of the FrameSpec entity.
// If the FrameSpec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FrameSpecMutation) OldParent(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParent: %w", err)
	}
	return oldValue.Parent, nil
}

// ResetParent resets all changes to the "parent" field.
func (m *FrameSpecMutation) ResetParent() {
	m.parentCollection = nil
}

// SetCollectExpressions sets the "collect_expressions" field.
func (m *FrameSpecMutation) SetCollectExpressions(s []string) {
	m.collect_expressions = &s
	m.appendcollect_expressions = nil
}

// CollectExpressions returns the value of the "collect_expressions" field in the mutation.
func (m *FrameSpecMutation) CollectExpressions() (r []string, exists bool) {
	v := m.collect_expressions
	if v == nil {
		return
	}
	return *v, true
}

// OldCollectExpressions returns the old "collect_expressions" field's value of the FrameSpec entity.
// If the FrameSpec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FrameSpecMutation) OldCollectExpressions(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCollectExpressions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCollectExpressions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCollectExpressions: %w", err)
	}
	return oldValue.CollectExpressions, nil
}

// AppendCollectExpressions adds s to the "collect_expressions" field.
func (m *FrameSpecMutation) AppendCollectExpressions(s []string) {
	m.appendcollect_expressions = append(m.appendcollect_expressions, s...)
}

// AppendedCollectExpressions returns the list of values that were appended to the "collect_expressions" field in this mutation.
func (m *FrameSpecMutation) AppendedCollectExpressions() ([]string, bool) {
	if len(m.appendcollect_expressions) == 0 {
		return nil, false
	}
	return m.appendcollect_expressions, true
}

// ResetCollectExpressions resets all changes to the "collect_expressions" field.
func (m *FrameSpecMutation) ResetCollectExpressions() {
	m.collect_expressions = nil
	m.appendcollect_expressions = nil
}

// SetFlightRecorderEvents sets the "flight_recorder_events" field.
func (m *FrameSpecMutation) SetFlightRecorderEvents(s []string) {
	m.flight_recorder_events = &s
	m.appendflight_recorder_events = nil
}

// FlightRecorderEvents returns the value of the "flight_recorder_events" field in the mutation.
func (m *FrameSpecMutation) FlightRecorderEvents() (r []string, exists bool) {
	v := m.flight_recorder_events
	if v == nil {
		return
	}
	return *v, true
}

// OldFlightRecorderEvents returns the old "flight_recorder_events" field's value of the FrameSpec entity.
// If the FrameSpec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FrameSpecMutation) OldFlightRecorderEvents(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFlightRecorderEvents is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFlightRecorderEvents requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFlightRecorderEvents: %w", err)
	}
	return oldValue.FlightRecorderEvents, nil
}

// AppendFlightRecorderEvents adds s to the "flight_recorder_events" field.
func (m *FrameSpecMutation) AppendFlightRecorderEvents(s []string) {
	m.appendflight_recorder_events = append(m.appendflight_recorder_events, s...)
}

// AppendedFlightRecorderEvents returns the list of values that were appended to the "flight_recorder_events" field in this mutation.
func (m *FrameSpecMutation) AppendedFlightRecorderEvents() ([]string, bool) {
	if len(m.appendflight_recorder_events) == 0 {
		return nil, false
	}
	return m.appendflight_recorder_events, true
}

// ResetFlightRecorderEvents resets all changes to the "flight_recorder_events" field.
func (m *FrameSpecMutation) ResetFlightRecorderEvents() {
	m.flight_recorder_events = nil
	m.appendflight_recorder_events = nil
}

// SetParentCollectionID sets the "parentCollection" edge to the CollectSpec entity by id.
func (m *FrameSpecMutation) SetParentCollectionID(id int) {
	m.parentCollection = &id
}

// ClearParentCollection clears the "parentCollection" edge to the CollectSpec entity.
func (m *FrameSpecMutation) ClearParentCollection() {
	m.clearedparentCollection = true
}

// ParentCollectionCleared reports if the "parentCollection" edge to the CollectSpec entity was cleared.
func (m *FrameSpecMutation) ParentCollectionCleared() bool {
	return m.clearedparentCollection
}

// ParentCollectionID returns the "parentCollection" edge ID in the mutation.
func (m *FrameSpecMutation) ParentCollectionID() (id int, exists bool) {
	if m.parentCollection != nil {
		return *m.parentCollection, true
	}
	return
}

// ParentCollectionIDs returns the "parentCollection" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentCollectionID instead. It exists only for internal usage by the builders.
func (m *FrameSpecMutation) ParentCollectionIDs() (ids []int) {
	if id := m.parentCollection; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParentCollection resets all changes to the "parentCollection" edge.
func (m *FrameSpecMutation) ResetParentCollection() {
	m.parentCollection = nil
	m.clearedparentCollection = false
}

// Where appends a list predicates to the FrameSpecMutation builder.
func (m *FrameSpecMutation) Where(ps ...predicate.FrameSpec) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FrameSpecMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FrameSpecMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FrameSpec, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FrameSpecMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FrameSpecMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FrameSpec).
func (m *FrameSpecMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FrameSpecMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.frame != nil {
		fields = append(fields, framespec.FieldFrame)
	}
	if m.parentCollection != nil {
		fields = append(fields, framespec.FieldParent)
	}
	if m.collect_expressions != nil {
		fields = append(fields, framespec.FieldCollectExpressions)
	}
	if m.flight_recorder_events != nil {
		fields = append(fields, framespec.FieldFlightRecorderEvents)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FrameSpecMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case framespec.FieldFrame:
		return m.Frame()
	case framespec.FieldParent:
		return m.Parent()
	case framespec.FieldCollectExpressions:
		return m.CollectExpressions()
	case framespec.FieldFlightRecorderEvents:
		return m.FlightRecorderEvents()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FrameSpecMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case framespec.FieldFrame:
		return m.OldFrame(ctx)
	case framespec.FieldParent:
		return m.OldParent(ctx)
	case framespec.FieldCollectExpressions:
		return m.OldCollectExpressions(ctx)
	case framespec.FieldFlightRecorderEvents:
		return m.OldFlightRecorderEvents(ctx)
	}
	return nil, fmt.Errorf("unknown FrameSpec field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FrameSpecMutation) SetField(name string, value ent.Value) error {
	switch name {
	case framespec.FieldFrame:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFrame(v)
		return nil
	case framespec.FieldParent:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParent(v)
		return nil
	case framespec.FieldCollectExpressions:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCollectExpressions(v)
		return nil
	case framespec.FieldFlightRecorderEvents:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFlightRecorderEvents(v)
		return nil
	}
	return fmt.Errorf("unknown FrameSpec field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FrameSpecMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FrameSpecMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FrameSpecMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FrameSpec numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FrameSpecMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FrameSpecMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FrameSpecMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FrameSpec nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FrameSpecMutation) ResetField(name string) error {
	switch name {
	case framespec.FieldFrame:
		m.ResetFrame()
		return nil
	case framespec.FieldParent:
		m.ResetParent()
		return nil
	case framespec.FieldCollectExpressions:
		m.ResetCollectExpressions()
		return nil
	case framespec.FieldFlightRecorderEvents:
		m.ResetFlightRecorderEvents()
		return nil
	}
	return fmt.Errorf("unknown FrameSpec field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FrameSpecMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.parentCollection != nil {
		edges = append(edges, framespec.EdgeParentCollection)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FrameSpecMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case framespec.EdgeParentCollection:
		if id := m.parentCollection; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FrameSpecMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FrameSpecMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FrameSpecMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedparentCollection {
		edges = append(edges, framespec.EdgeParentCollection)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FrameSpecMutation) EdgeCleared(name string) bool {
	switch name {
	case framespec.EdgeParentCollection:
		return m.clearedparentCollection
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FrameSpecMutation) ClearEdge(name string) error {
	switch name {
	case framespec.EdgeParentCollection:
		m.ClearParentCollection()
		return nil
	}
	return fmt.Errorf("unknown FrameSpec unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FrameSpecMutation) ResetEdge(name string) error {
	switch name {
	case framespec.EdgeParentCollection:
		m.ResetParentCollection()
		return nil
	}
	return fmt.Errorf("unknown FrameSpec edge %s", name)
}

// ProcessSnapshotMutation represents an operation that mutates the ProcessSnapshot nodes in the graph.
type ProcessSnapshotMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	process_id         *string
	snapshot           *string
	frames_of_interest *string
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*ProcessSnapshot, error)
	predicates         []predicate.ProcessSnapshot
}

var _ ent.Mutation = (*ProcessSnapshotMutation)(nil)

// processsnapshotOption allows management of the mutation configuration using functional options.
type processsnapshotOption func(*ProcessSnapshotMutation)

// newProcessSnapshotMutation creates new mutation for the ProcessSnapshot entity.
func newProcessSnapshotMutation(c config, op Op, opts ...processsnapshotOption) *ProcessSnapshotMutation {
	m := &ProcessSnapshotMutation{
		config:        c,
		op:            op,
		typ:           TypeProcessSnapshot,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProcessSnapshotID sets the ID field of the mutation.
func withProcessSnapshotID(id int) processsnapshotOption {
	return func(m *ProcessSnapshotMutation) {
		var (
			err   error
			once  sync.Once
			value *ProcessSnapshot
		)
		m.oldValue = func(ctx context.Context) (*ProcessSnapshot, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().ProcessSnapshot.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProcessSnapshot sets the old ProcessSnapshot of the mutation.
func withProcessSnapshot(node *ProcessSnapshot) processsnapshotOption {
	return func(m *ProcessSnapshotMutation) {
		m.oldValue = func(context.Context) (*ProcessSnapshot, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProcessSnapshotMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProcessSnapshotMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProcessSnapshotMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProcessSnapshotMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().ProcessSnapshot.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetProcessID sets the "process_id" field.
func (m *ProcessSnapshotMutation) SetProcessID(s string) {
	m.process_id = &s
}

// ProcessID returns the value of the "process_id" field in the mutation.
func (m *ProcessSnapshotMutation) ProcessID() (r string, exists bool) {
	v := m.process_id
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessID returns the old "process_id" field's value of the ProcessSnapshot entity.
// If the ProcessSnapshot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessSnapshotMutation) OldProcessID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessID: %w", err)
	}
	return oldValue.ProcessID, nil
}

// ResetProcessID resets all changes to the "process_id" field.
func (m *ProcessSnapshotMutation) ResetProcessID() {
	m.process_id = nil
}

// SetSnapshot sets the "snapshot" field.
func (m *ProcessSnapshotMutation) SetSnapshot(s string) {
	m.snapshot = &s
}

// Snapshot returns the value of the "snapshot" field in the mutation.
func (m *ProcessSnapshotMutation) Snapshot() (r string, exists bool) {
	v := m.snapshot
	if v == nil {
		return
	}
	return *v, true
}

// OldSnapshot returns the old "snapshot" field's value of the ProcessSnapshot entity.
// If the ProcessSnapshot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessSnapshotMutation) OldSnapshot(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSnapshot is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSnapshot requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSnapshot: %w", err)
	}
	return oldValue.Snapshot, nil
}

// ResetSnapshot resets all changes to the "snapshot" field.
func (m *ProcessSnapshotMutation) ResetSnapshot() {
	m.snapshot = nil
}

// SetFramesOfInterest sets the "frames_of_interest" field.
func (m *ProcessSnapshotMutation) SetFramesOfInterest(s string) {
	m.frames_of_interest = &s
}

// FramesOfInterest returns the value of the "frames_of_interest" field in the mutation.
func (m *ProcessSnapshotMutation) FramesOfInterest() (r string, exists bool) {
	v := m.frames_of_interest
	if v == nil {
		return
	}
	return *v, true
}

// OldFramesOfInterest returns the old "frames_of_interest" field's value of the ProcessSnapshot entity.
// If the ProcessSnapshot object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcessSnapshotMutation) OldFramesOfInterest(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFramesOfInterest is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFramesOfInterest requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFramesOfInterest: %w", err)
	}
	return oldValue.FramesOfInterest, nil
}

// ClearFramesOfInterest clears the value of the "frames_of_interest" field.
func (m *ProcessSnapshotMutation) ClearFramesOfInterest() {
	m.frames_of_interest = nil
	m.clearedFields[processsnapshot.FieldFramesOfInterest] = struct{}{}
}

// FramesOfInterestCleared returns if the "frames_of_interest" field was cleared in this mutation.
func (m *ProcessSnapshotMutation) FramesOfInterestCleared() bool {
	_, ok := m.clearedFields[processsnapshot.FieldFramesOfInterest]
	return ok
}

// ResetFramesOfInterest resets all changes to the "frames_of_interest" field.
func (m *ProcessSnapshotMutation) ResetFramesOfInterest() {
	m.frames_of_interest = nil
	delete(m.clearedFields, processsnapshot.FieldFramesOfInterest)
}

// Where appends a list predicates to the ProcessSnapshotMutation builder.
func (m *ProcessSnapshotMutation) Where(ps ...predicate.ProcessSnapshot) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the ProcessSnapshotMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *ProcessSnapshotMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.ProcessSnapshot, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *ProcessSnapshotMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *ProcessSnapshotMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (ProcessSnapshot).
func (m *ProcessSnapshotMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProcessSnapshotMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.process_id != nil {
		fields = append(fields, processsnapshot.FieldProcessID)
	}
	if m.snapshot != nil {
		fields = append(fields, processsnapshot.FieldSnapshot)
	}
	if m.frames_of_interest != nil {
		fields = append(fields, processsnapshot.FieldFramesOfInterest)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProcessSnapshotMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case processsnapshot.FieldProcessID:
		return m.ProcessID()
	case processsnapshot.FieldSnapshot:
		return m.Snapshot()
	case processsnapshot.FieldFramesOfInterest:
		return m.FramesOfInterest()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProcessSnapshotMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case processsnapshot.FieldProcessID:
		return m.OldProcessID(ctx)
	case processsnapshot.FieldSnapshot:
		return m.OldSnapshot(ctx)
	case processsnapshot.FieldFramesOfInterest:
		return m.OldFramesOfInterest(ctx)
	}
	return nil, fmt.Errorf("unknown ProcessSnapshot field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcessSnapshotMutation) SetField(name string, value ent.Value) error {
	switch name {
	case processsnapshot.FieldProcessID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessID(v)
		return nil
	case processsnapshot.FieldSnapshot:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSnapshot(v)
		return nil
	case processsnapshot.FieldFramesOfInterest:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFramesOfInterest(v)
		return nil
	}
	return fmt.Errorf("unknown ProcessSnapshot field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProcessSnapshotMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProcessSnapshotMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcessSnapshotMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown ProcessSnapshot numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProcessSnapshotMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(processsnapshot.FieldFramesOfInterest) {
		fields = append(fields, processsnapshot.FieldFramesOfInterest)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProcessSnapshotMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProcessSnapshotMutation) ClearField(name string) error {
	switch name {
	case processsnapshot.FieldFramesOfInterest:
		m.ClearFramesOfInterest()
		return nil
	}
	return fmt.Errorf("unknown ProcessSnapshot nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProcessSnapshotMutation) ResetField(name string) error {
	switch name {
	case processsnapshot.FieldProcessID:
		m.ResetProcessID()
		return nil
	case processsnapshot.FieldSnapshot:
		m.ResetSnapshot()
		return nil
	case processsnapshot.FieldFramesOfInterest:
		m.ResetFramesOfInterest()
		return nil
	}
	return fmt.Errorf("unknown ProcessSnapshot field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProcessSnapshotMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProcessSnapshotMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProcessSnapshotMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProcessSnapshotMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProcessSnapshotMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProcessSnapshotMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProcessSnapshotMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown ProcessSnapshot unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProcessSnapshotMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown ProcessSnapshot edge %s", name)
}
